{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap e10bd1f042ed63af89d6","webpack:///./src/core/core.js","webpack:///./src/core/analysis/message.js","webpack:///./src/core/analysis/message-list.js","webpack:///external \"_\"","webpack:///./src/core/analysis/pos.js","webpack:///./src/core/analysis/1-lexical/token-type.js","webpack:///./src/core/analysis/1-lexical/token.js","webpack:///./src/core/analysis/1-lexical/token-stream.js","webpack:///./~/underscore.string/ltrim.js","webpack:///./~/underscore.string/helper/makeString.js","webpack:///./~/underscore.string/helper/defaultToWhiteSpace.js","webpack:///./~/underscore.string/helper/escapeRegExp.js","webpack:///./~/underscore.string/rtrim.js","webpack:///./src/core/analysis/2-syntactic/tree-node-type.js","webpack:///./src/core/analysis/2-syntactic/tree-node.js","webpack:///./src/core/analysis/2-syntactic/tree.js","webpack:///./src/core/analysis/3-semantic/validation-rule.js","webpack:///./src/core/analysis/3-semantic/validation-rules.js","webpack:///./src/core/analysis/3-semantic/validator.js","webpack:///./src/core/config/dialect.js","webpack:///./src/core/config/locale.js","webpack:///./~/remove-markdown/index.js","webpack:///./src/core/config/symbols.js","webpack:///./src/core/text.js","webpack:///./src/core/calculator.js","webpack:///./src/extra/standard-validation-rules.js","webpack:///./src/extra/standard-symbols.js","webpack:///./src/i18n/en.js"],"names":[],"mappings":"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","file":"humane-math.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"_\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"_\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"HumaneMath\"] = factory(require(\"_\"));\n\telse\n\t\troot[\"HumaneMath\"] = factory(root[\"_\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e10bd1f042ed63af89d6\n **/","import {Message}     from './analysis/message';\nimport {MessageList} from './analysis/message-list';\nimport {Pos}         from './analysis/pos';\n\nimport {TokenType}   from './analysis/1-lexical/token-type';\nimport {Token}       from './analysis/1-lexical/token';\nimport {TokenStream} from './analysis/1-lexical/token-stream';\n\nimport {TreeNodeType} from './analysis/2-syntactic/tree-node-type';\nimport {TreeNode}     from './analysis/2-syntactic/tree-node';\nimport {Tree}         from './analysis/2-syntactic/tree';\n\nimport {ValidationRule}  from './analysis/3-semantic/validation-rule';\nimport {ValidationRules} from './analysis/3-semantic/validation-rules';\nimport {Validator}       from './analysis/3-semantic/validator';\n\nimport {Dialect} from './config/dialect';\nimport {Locale}  from './config/locale';\nimport {Symbols} from './config/symbols';\n\nimport {Text}       from './text';\nimport {Calculator} from './calculator';\n\nvar HumaneMath = {\n  Message,\n  MessageList,\n  Pos,\n\n  TokenType,\n  Token,\n  TokenStream,\n\n  TreeNodeType,\n  TreeNode,\n  Tree,\n\n  ValidationRule,\n  ValidationRules,\n  Validator,\n\n  Dialect,\n  Locale,\n  Symbols,\n\n  Text,\n  Calculator,\n\n  symbols: {},\n  validationRules: {},\n  locales: {}\n};\n\nHumaneMath.addLocale = function(locale, data) {\n  HumaneMath.locales[locale] = new Locale(data);\n};\n\nHumaneMath.setLocale = function(locale) {\n  HumaneMath.currentLocale = locale;\n};\n\nexport {HumaneMath};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/core.js\n **/","/*\n * Message keeps information about an error or a warning in a math text\n */\nexport class Message {\n\n  /**\n   * Creates a message\n   *\n   * @param {string} type\n   *    Unique textual identifier of a message type.\n   * @param {Pos} pos\n   *    Part of the Text the message is related to.\n   * @param {Object} params\n   *    Additional parameters of the message that clarify its context.\n   */\n  construct(type, pos, params = {}) {\n    this._type = type;\n    this._pos = pos;\n    this._params = params;\n    //this.strCache = null;\n  }\n\n  get type() {return this._type;}\n  get pos() {return this._pos;}\n  get params() {return this._params;}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/message.js\n **/","import _ from 'underscore';\n/**\n * MessageList is used to store lists of errors or warnings in Math classes.\n */\nexport class MessageList {\n\n  /**\n   * Creates an empty list of Math Messages\n   *\n   * @param {MathMessageList} [MathMessageList1], [MathMessageList2], [...]\n   *    Lists to be joined.\n   */\n  constructor(...listsToJoin) {\n    this.clear();\n\n    // Join input argument lists if any arguments were passed.\n    if (listsToJoin.length) {\n\n      for (var i = listsToJoin.length - 1; i >= 0; i--) {\n        if (arguments[i]) {\n          this._list = this._list.concat(listsToJoin[i]._list);\n        }\n      }\n    }\n  }\n\n  /**\n   * Clears the list of Math Messages\n   *\n   * @returns {MathMessageList} current object.\n   */\n  clear() {\n    this._list = [];\n    return this;\n  }\n\n  /**\n   * Adds a message into the list.\n   *\n   * @param {Message} message\n   *    message Message that needs to be added.\n   *\n   * @returns {MessageList}\n   *     current object\n   */\n  add(message) {\n    this._list.push(message);\n    return this;\n  }\n\n  /**\n   * Helps to verify whether a list of messages is empty.\n   *\n   * @returns {boolean}\n   *     true if the list is empty.\n   */\n  isEmpty() {\n    return this._list.length == 0;\n  }\n\n  /**\n   * Returns the number of messages in the list.\n   *\n   * @returns {number}\n   */\n  count() {\n    return this._list.length;\n  }\n\n  /**\n   * Sorts the list by message positions.\n   *\n   * @returns {MessageList}\n   *     current object\n   */\n  sort() {\n    this._list = _.sortBy(this._list, function(mathMessage) {\n      if (mathMessage.pos) {\n        return mathMessage.pos.pos + 0.0001 * mathMessage.pos.len;\n      } else {\n        return Infinity;\n      }\n    });\n    return this;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/message-list.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"_\"\n ** module id = 4\n ** module chunks = 0\n **/","/**\n * Saves the position of a token / tree / node / error / warning, etc.\n */\n\nexport class Pos {\n\n  /**\n   * Creates an object that saves the position of\n   * token / tree / node / error / warning / etc.\n   *\n   * @param {int} col\n   *    Position — Column\n   * @param {int} row\n   *    Position — Row\n   * @param {int} pos\n   *    Absolute Position\n   * @param {int} length\n   *    Length of an object\n   */\n  construct(col, row, pos, length) {\n    this.col = col;\n    this.row = row;\n    this.pos = pos;\n    this.len = length;\n  }\n\n  /**\n   * Creates a new Pos object which contains the whole range of characters\n   * from the beginning of pos1 to the end of pos2.\n   *\n   * @param {Pos} pos1\n   * @param {Pos} pos2\n   *\n   * @returns {Pos}\n   *      new Pos object.\n   */\n  unite(pos1, pos2) {\n    return new Pos(\n        pos1.col,\n        pos1.row,\n        pos1.pos,\n        pos2.len + pos2.pos - pos1.pos\n      );\n  }\n\n  /**\n   * Creates a new Pos object which contains the range of characters between\n   * end of pos1 to the beginning of pos2.\n   *\n   * @param {Pos} pos1\n   * @param {Pos} pos2\n   *\n   * @returns {Pos}\n   *      new Pos object.\n   */\n  between(pos1, pos2) {\n    return new Pos(\n        pos1.col + pos1.len,\n        pos1.row,\n        pos1.pos + pos1.len,\n        pos2.pos - pos1.pos - pos1.len\n      );\n  }\n\n  /**\n   * Creates a new Pos object with zero length at the beginning of the given pos.\n   *\n   * @param {Pos} pos\n   *\n   * @returns {Pos}\n   */\n  beginning(pos) {\n    return new Pos(\n        pos.col,\n        pos.row,\n        pos.pos,\n        0\n      );\n  }\n\n  /**\n   * Creates a new Pos object with zero length at the ending of the given pos.\n   *\n   * @param {Pos} pos\n   *\n   * @returns {Pos}\n   */\n  ending(pos) {\n    return new Pos(\n        pos.col + pos.len,\n        pos.row,\n        pos.pos + pos.len,\n        0\n      );\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/pos.js\n **/","/**\n * Token types\n */\nexport class TokenType {\n\n  // Acceptable tokens\n  static EOF = 0; // end of string\n  static RB_LEFT = 1; // (\n  static RB_RIGHT = 2; // )\n  static COMMA = 3;\n  static EQUAL = 11;\n  static LESS = 12;\n  static MORE = 13;\n  static LESS_EQUAL = 14;\n  static MORE_EQUAL = 15;\n  static ADD = 21;\n  static SUBTRACT = 22;\n  static MULTIPLY = 23;\n  static DIVIDE = 24;\n  static POWER = 25;\n  static NUMBER = 31;\n  static SYMBOL = 32;\n  static SEMICOLON = 33;\n\n  // Tokens that point to an error\n  static E_UNKNOWN = 128; // Unknown sequence of symbols (undefined error)\n  static E_NUMBER_MALFORMED = 129; // Malformed number\n  static E_NUMBER_EXPONENTIAL = 130; // Number in exponential notation.\n  static E_VERTICAL_SLASH = 131; // Attempt to use a vertical slash to get an absolute value\n  static E_STARSTAR = 132; // Attempt to use ** for power instead of ^\n  static E_EQUALEQUAL = 133; // Attempt to use == for power instead of =\n  static E_MISPLACED_DOT = 134; // Misplaced dot (without a number)\n  static E_SB_LEFT = 140; // Left square bracket\n  static E_SB_RIGHT = 141; // Right square bracket\n  static E_CB_LEFT = 142; // Right square bracket\n  static E_CB_RIGHT = 143; // Right square bracket\n  static E_AB_LEFT = 144; // Right angle bracket\n  static E_AB_RIGHT = 145; // Right angle bracket\n  static E_BACK_SLASH = 146; // Use of back slash instead of a regular slash\n  static E_REST = 150; // The rest of the input string that was not converted to tokens (used when a stream contains more than MAX_TOKEN_COUNT)\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/1-lexical/token-type.js\n **/","import _ from 'underscore';\nimport {Pos}       from '../pos';\nimport {TokenType} from './token-type';\n\nexport class Token {\n  /**\n   * Creates a single token for use in the MathTokenStream\n   *\n   * @param {number} type\n   *    Type of a token\n   * @param {number} col\n   *    Position — Column\n   * @param {number} row\n   *    Position — Row\n   * @param {number} pos\n   *    Absolute Position\n   * @param {string} raw\n   *    Raw (unchanged) data\n   * @param {Numeric} value\n   *    (Optional) Value (calculated data) for some token types\n   */\n  constructor(type, col, row, pos, raw, value) {\n    this.type = type;\n    if (!_.isUndefined(raw)) {\n      this.pos = new Pos(col, row, pos, raw.length);\n      this.raw = raw;\n    }\n    if (!_.isUndefined(value)) {\n      this.value = value;\n    }\n  }\n\n  /**\n   * Returns a string digest of a token. This can be useful when calculating hash of a TokenStream.\n   *\n   * @returns {string}\n   */\n  getHash() {\n    return `${this.type}|${this.pos.pos}|${this.pos.row}|${(_.isUndefined(this.value) ? '' : this.value)}$`;\n  }\n\n  /**\n   * Returns true if the token corresponds to an end of an input string.\n   *\n   * @returns {boolean}\n   */\n  isEOF() {\n    return this.type == TokenType.EOF;\n  }\n\n  /**\n   * Returns true if requested token is an error token.\n   *\n   * @returns {boolean}\n   */\n  isErrorToken() {\n    return this.type >= TokenType.E_UNKNOWN;\n  }\n\n  /**\n   * Checks if a token is a left bracket of any kind\n   *\n   * @returns {boolean}\n   */\n  isLeftBracket() {\n    return this.type == TokenType.RB_LEFT\n        || this.type == TokenType.E_SB_LEFT\n        || this.type == TokenType.E_CB_LEFT\n        || this.type == TokenType.E_AB_LEFT;\n  }\n\n  /**\n   * Checks if a token is a right bracket of any kind\n   *\n   * @returns {boolean}\n   */\n  isRightBracket() {\n    return this.type == TokenType.RB_RIGHT\n        || this.type == TokenType.E_SB_RIGHT\n        || this.type == TokenType.E_CB_RIGHT\n        || this.type == TokenType.E_AB_RIGHT;\n  }\n\n  /**\n   * Checks if a token is numeric\n   *\n   * @returns {boolean}\n   */\n  isNumber() {\n    return this.type == TokenType.NUMBER\n        || this.type == TokenType.E_NUMBER_MALFORMED\n        || this.type == TokenType.E_NUMBER_EXPONENTIAL;\n  }\n\n  /**\n   * Checks if a token is a symbol\n   *\n   * @returns {boolean}\n   */\n  isSymbol() {\n    return this.type == TokenType.SYMBOL;\n  }\n\n  /**\n   * Checks if a token is a power sign (^ or **)\n   *\n   * @returns {boolean}\n   */\n  isPowerSign() {\n    return this.type == TokenType.POWER\n        || this.type == TokenType.E_STARSTAR;\n  }\n\n  /**\n   * Checks if a token is a term sign (MULTIPLY or DIVIDE)\n   *\n   * @returns {boolean}\n   */\n  isTermSign() {\n    return this.type == TokenType.MULTIPLY\n        || this.type == TokenType.DIVIDE\n        || this.type == TokenType.E_MISPLACED_DOT\n        || this.type == TokenType.E_BACK_SLASH;\n  }\n\n  /**\n   * Checks if a token is a mathematical operator\n   * (any of those that are used in parsing expressions, terms and powers).\n   *\n   * @returns {boolean}\n   */\n  isMathOperator() {\n    return this.isExpressionSign() || this.isTermSign() || this.isPowerSign();\n  }\n\n  /**\n   * Checks if a token is an expression sign (ADD or SUBTRACT)\n   *\n   * @returns {boolean}\n   */\n  isExpressionSign() {\n    return this.type == TokenType.ADD || this.type == TokenType.SUBTRACT;\n  }\n\n  /**\n   * Checks if a token is an statement sign\n   * (EQUAL|LESS|MORE|MORE_EQUAL|LESS_EQUAL)\n   *\n   * @returns {boolean}\n   */\n  isStatementSign() {\n    return this.type == TokenType.EQUAL\n      || this.type == TokenType.LESS\n      || this.type == TokenType.MORE\n      || this.type == TokenType.MORE_EQUAL\n      || this.type == TokenType.LESS_EQUAL\n      || this.type == TokenType.E_EQUALEQUAL;\n  }\n\n  /**\n   * Makes a shallow copy of a token object with the type changed to the correct\n   * one in case it is an special error token. This is useful for passing data to\n   * language templates in order to avoid redundancy in them.\n   *\n   * @returns {boolean}\n   *\n   * @example E_NUMBER_MALFORMED changes to NUMBER\n   */\n  cloneWithCorrectedType() {\n    var clone = _.clone(this);\n\n    // Substitution of a type for error tokens\n    if (clone.isErrorToken()) {\n      if (clone.isRightBracket()) {\n        clone.type = TokenType.RB_LEFT;\n      } else if (clone.isLeftBracket()) {\n        clone.type = TokenType.LB_LEFT;\n      } else if (clone.isNumber()) {\n        clone.type = TokenType.NUMBER;\n      } else if (clone.isPowerSign()) {\n        clone.type = TokenType.POWER;\n      }\n    }\n\n    return clone;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/1-lexical/token.js\n **/","import _ from 'underscore';\nimport ltrim from 'underscore.string/ltrim';\nimport rtrim from 'underscore.string/rtrim';\nimport {Message}     from '../message';\nimport {MessageList} from '../message-list';\nimport {Token}       from './token';\nimport {TokenType}   from './token-type';\n\n/**\n * Converts an input stream into tokens\n */\nexport class TokenStream {\n\n  // Maximum possible size of the token stream\n  static MAX_TOKEN_COUNT = 500;\n\n  // List of characters that should be interpreted as spaces\n  static WHITESPACE = ' \\n\\r\\t\\f\\x0b\\xa0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000';\n  static TOKEN_FOUND_EXCEPTION = 42;\n\n  // Regular expressions used for converting text to tokens\n  static RE_NUMBER = /^[0-9]+(\\.[0-9]+)?/;\n  static RE_SYMBOL = /^[a-zA-Zа-яА-ЯёЁα-ωΑ-Ω][_a-zA-Zа-яА-ЯёЁα-ωΑ-Ω0-9]*/;\n  static RE_E_NUMBER_MALFORMED = /^(\\.[0-9]+|[0-9]+(\\.[0-9]+){2,}|([0-9]+\\.([^0-9]|$)))/;\n  static RE_E_NUMBER_EXPONENTIAL = /^[0-9]+(\\.[0-9]+)?[EeЕе][+-]?[0-9]+/;\n\n  constructor() {\n    this.reset();\n    this.errors = new MessageList();\n  }\n\n  /**\n   * Calculates hash for the TokenStream to determine whether it was changed or not\n   *\n   * @memberOf TokenStream\n   * @returns {string}\n   */\n  getHash() {\n    var hash = '';\n    for (var i = this.tokens.length - 1; i >= 0; i--) {\n      hash = this.tokens[i].getHash() + hash;\n    }\n    return hash;\n  }\n\n  /**\n   * Resets TokenStream object to default empty state\n   */\n  reset() {\n    this.raw = null;\n    this.tokens = [];\n    this.cursorPos = 0;\n  }\n\n  /**\n   * Skips spaces while converting text to tokens and recalculates the position of the cursor\n   */\n  skipSpaces() {\n    for (var i = 0; i < this.temp.raw.length; i++) {\n      if (this.temp.raw.charAt(i) == '\\n') {\n        this.temp.row++;\n        this.temp.pos++;\n        this.temp.col = 0;\n      } else {\n        if (TokenStream.WHITESPACE.indexOf(this.temp.raw.charAt(i)) === -1) {\n          this.temp.raw = this.temp.raw.slice(i);\n          break;\n        }\n        this.temp.col++;\n        this.temp.pos++;\n      }\n    }\n  }\n\n  /**\n   * Adds token into the list of tokens\n   *\n   * @param {number} type\n   *    Type of a Token (among MathTokeType.*)\n   * @param {number} length\n   *    Length of a new token\n   * @param {number} [value]\n   *    Evaluated value of a token (for symbols and numbers).\n   * @param {boolean} [dontThrowException]\n   *    if is set to true, no TOKEN_FOUND_EXCEPTION is thrown.\n   */\n  addToken(type, length, value, dontThrowException) {\n    this.tokens.push(new Token(\n        type,\n        this.temp.col,\n        this.temp.row,\n        this.temp.pos,\n        this.temp.raw.slice(0, length), value)\n      );\n    this.temp.pos += length;\n    this.temp.col += length;\n    this.temp.raw = this.temp.raw.slice(length);\n    if (!dontThrowException) {\n      throw TokenStream.TOKEN_FOUND_EXCEPTION;\n    }\n  }\n\n  /**\n   *\n   * @param {string} newRaw\n   *    New raw string to be tokenized\n   *\n   * @returns {boolean}\n   *      true if a stream of tokens has changed since the last function call\n   */\n  tokenize(newRaw) {\n    // Basic check for changes\n    if (newRaw === this.raw) {\n      return false;\n    }\n\n    // Basic check failed – tokenize the string\n    this.reset();\n    this.raw = newRaw;\n\n    // Initialize some temporary data needed while tokenizing\n    this.temp = {};\n    this.temp.raw = rtrim(newRaw);\n    this.temp.pos = 0;\n    this.temp.col = 0;\n    this.temp.row = 0;\n\n    // Extract tokens in a loop\n    for (let i = TokenStream.MAX_TOKEN_COUNT; i >= 0; i--) {\n\n      this.skipSpaces();\n\n      // Exit if reached an end of the input string\n      if (this.temp.raw == '') {\n        break;\n      }\n\n      // Extract a token from the beginning of an input string.\n      // #addToken throws TokenStream.TOKEN_FOUND_EXCEPTION.\n\n      try {\n        // Compound tokens part 1, see part 2 after all simple tokens\n        // -- “less or equal” or “more or equal” (≤ and ≥ are below)\n        if (this.temp.raw.charAt(0) == '<' || this.temp.raw.charAt(0) == '>') {\n          let searchString = ltrim(this.temp.raw.slice(1));\n          if (searchString.charAt(0) == '=') {\n            this.addToken(\n                (this.temp.raw.charAt(0) == '<')\n                  ? TokenType.LESS_EQUAL\n                  : TokenType.MORE_EQUAL,\n                this.temp.raw.length - searchString.length + 1\n              );\n          }\n        }\n        // -- error: use of ==\n        if (this.temp.raw.charAt(0) == '=') {\n          let searchString = _.ltrim(this.temp.raw.slice(1));\n          if (searchString.charAt(0) == '=') {\n            this.addToken(\n                TokenType.E_EQUALEQUAL,\n                this.temp.raw.length - searchString.length + 1\n              );\n          }\n        }\n\n        // -- error: Use of ** for power instead of ^\n        if (this.temp.raw.charAt(0) == '*') {\n          let searchString = _.ltrim(this.temp.raw.slice(1));\n          if (searchString.charAt(0) == '*') {\n            this.addToken(\n                TokenType.E_STARSTAR,\n                this.temp.raw.length - searchString.length + 1\n              );\n          }\n        }\n\n        // simple tokens (1 character long)\n        /* eslint-disable no-fallthrough */\n        switch (this.temp.raw.charAt(0)) {\n        // -- left bracket\n        case '(':\n          this.addToken(TokenType.RB_LEFT, 1);\n        // -- right bracket\n        case ')':\n          this.addToken(TokenType.RB_RIGHT, 1);\n        // -- comma\n        case ',':\n          this.addToken(TokenType.COMMA, 1);\n        // -- semicolon\n        case ';':\n          this.addToken(TokenType.SEMICOLON, 1);\n        // -- equal\n        case '=':\n          this.addToken(TokenType.EQUAL, 1);\n        // -- less\n        case '<':\n          this.addToken(TokenType.LESS, 1);\n        // -- more\n        case '>':\n          this.addToken(TokenType.MORE, 1);\n        // -- less or equal\n        case '≤':\n          this.addToken(TokenType.LESS, 1);\n        // -- more or equal\n        case '≥':\n          this.addToken(TokenType.MORE, 1);\n        // -- add\n        case '+':\n          this.addToken(TokenType.ADD, 1);\n        // -- subtract\n        case '-':\n        case '—':\n        case '−':\n        case '–':\n        case '―':\n          this.addToken(TokenType.SUBTRACT, 1);\n        // -- multiply\n        case '*':\n        case '×':\n        case '·':\n          this.addToken(TokenType.MULTIPLY, 1);\n        // -- divide\n        case '/':\n        case '÷':\n          this.addToken(TokenType.DIVIDE, 1);\n        // -- power\n        case '^':\n          this.addToken(TokenType.POWER, 1);\n        // -- error: use of right square bracket\n        case '[':\n          this.addToken(TokenType.E_SB_LEFT, 1);\n        // -- error: use of left square bracket\n        case ']':\n          this.addToken(TokenType.E_SB_RIGHT, 1);\n        // -- error: use of right curly bracket\n        case '{':\n          this.addToken(TokenType.E_CB_LEFT, 1);\n        // -- error: use of left curly bracket\n        case '}':\n          this.addToken(TokenType.E_CB_RIGHT, 1);\n        // -- error: Use of right angle bracket\n        case '⟨':\n          this.addToken(TokenType.E_AB_LEFT, 1);\n        // -- error: Use of left angle bracket\n        case '⟩':\n          this.addToken(TokenType.E_AB_RIGHT, 1);\n        // -- error: use of a vertical slash to get an absolute value\n        case '|':\n          this.addToken(TokenType.E_VERTICAL_SLASH, 1);\n        // -- error: use of a back slash to divide\n        case '\\\\':\n          this.addToken(TokenType.E_BACK_SLASH, 1);\n        }\n        /* eslint-enable */\n\n        // compound tokens, part 2\n        var match;\n\n        // -- symbol\n        match = this.temp.raw.match(TokenStream.RE_SYMBOL);\n        if (match) {\n          this.addToken(\n              TokenType.SYMBOL,\n              match[0].length,\n              match[0].toLowerCase()\n            );\n        }\n\n        // -- error: malformed number\n        // (depending on output of regex match, length of the token is different)\n        match = this.temp.raw.match(TokenStream.RE_E_NUMBER_MALFORMED);\n        if (match && !_.isUndefined(match[4])) {\n          if (!_.isUndefined(match[4]) && match[4].length > 0) {\n            match[1] = match[1].slice(0, match[1].length - 1);\n          }\n          this.addToken(\n              TokenType.E_NUMBER_MALFORMED,\n              match[1].length,\n              match[1].toLowerCase()\n            );\n        } else if (match) {\n          this.addToken(\n              TokenType.E_NUMBER_MALFORMED,\n              match[0].length, match[0].toLowerCase()\n            );\n        }\n\n        // -- error: a number in exponential notation\n        match = this.temp.raw.match(TokenStream.RE_E_NUMBER_EXPONENTIAL);\n        if (match) {\n          this.addToken(\n              TokenType.E_NUMBER_EXPONENTIAL,\n              match[0].length,\n              Number(match[0].replace(/[Ее]/, 'E')\n            ));\n        }\n\n        // -- number\n        match = this.temp.raw.match(TokenStream.RE_NUMBER);\n        if (match) {\n          this.addToken(\n              TokenType.NUMBER,\n              match[0].length,\n              Number(match[0])\n            );\n        }\n\n        // -- error: misplaced dot (period)\n        if (this.temp.raw.charAt(0) == '.') {\n          this.addToken(TokenType.E_MISPLACED_DOT, 1);\n        }\n\n        // all possible search was performed, but the token was not found\n        // --> Unknown symbol\n        this.addToken(TokenType.E_UNKNOWN, 1);\n\n      } catch (e) {\n        if (e != TokenStream.TOKEN_FOUND_EXCEPTION) {\n          throw e;\n        }\n      }\n\n      // check whether a search loop is stuck\n      //TODO revise\n      // if (i == 0) {\n      //   Logger.log(\"Probably a never-ending loop during tokenizing.\");\n      // }\n    }\n\n    // check if the end of a sting has been reached\n    // and add E_REST token if more characters remain\n    if (this.temp.raw.length) {\n      this.addToken(TokenType.E_REST, this.temp.raw.length, null, true);\n    }\n\n    // add last token (special EOF token)\n    this.addToken(TokenType.EOF, 0, null, true);\n\n    // delete temporary variable\n    delete this.temp;\n\n    // check for changes using hash\n    var hash = this.getHash();\n    if (hash == this.oldHash) {\n      return false;\n    }\n    this.oldHash = hash;\n\n    // form a list of errors\n    this.errors.clear();\n\n    for (let i = this.tokens.length - 1; i >= 0; i--) {\n      if (this.tokens[i].isErrorToken()) {\n        this.errors.add(new Message(\n            'e_lex_' + this.tokens[i].type,\n            this.tokens[i].pos,\n            this.tokens[i]\n          ));\n      }\n    }\n\n    // Reaching this point means that token stream has been changed\n    return true;\n  }\n\n  /**\n   * Returns a specific token defined by its position or false if it cannot be obtained.\n   *\n   * @param {number} tokenPos\n   *    Position of a requested token.\n   * @param {boolean} [moveCursor=false]\n   *    Set to true if cursor position needs to be changed.\n   *\n   * @returns {?Token}\n   *      Token or null if the search was out of range.\n   */\n  getToken(tokenPos, moveCursor) {\n    if (moveCursor) {\n      this.cursorPos = tokenPos;\n    }\n\n    if (this.cursorPos >= this.tokens.length) {\n      this.cursorPos = this.tokens.length - 1;\n    }\n\n    if (_.isUndefined(this.tokens[tokenPos])) {\n      return null;\n    }\n\n    return this.tokens[tokenPos];\n  }\n\n  /**\n   * Returns the first token of the stream.\n   *\n   * @param {boolean} [moveCursor=false]\n   *    Set to true if cursor position needs to be changed.\n   *\n   * @returns {Token}\n   *      Token or null if the search was out of range.\n   */\n  firstToken(moveCursor) {\n    return this.getToken(0, moveCursor);\n  }\n\n  /**\n   * Returns the last token of the stream.\n   * IMPORTANT NOTICE: The “last” token is not the EOF token, but the token before it.\n   *\n   * @param {boolean} [moveCursor=false]\n   *    Set to true if cursor position needs to be changed.\n   *\n   * @returns {Token}\n   *      Token or null if the search was out of range.\n   */\n  lastToken(moveCursor) {\n    return this.getToken(this.tokens.length - 2, moveCursor);\n  }\n\n  /**\n   * Returns the previous token of the stream.\n   *\n   * @param {boolean} [moveCursor=false]\n   *    Set to true if cursor position needs to be changed.\n   *\n   * @returns {Token}\n   *      Token or null if the search was out of range.\n   */\n  previousToken(moveCursor) {\n    return this.getToken(this.cursorPos - 1, moveCursor);\n  }\n\n  /**\n   * Returns the next token of the stream.\n   *\n   * @param {boolean} [moveCursor=false]\n   *    Set to true if cursor position needs to be changed.\n   *\n   * @returns {Token}\n   *      Token or null if the search was out of range.\n   */\n  nextToken(moveCursor) {\n    return this.getToken(this.cursorPos + 1, moveCursor);\n  }\n\n  /**\n   * Returns current token of the stream.\n   *\n   * @returns {Token}\n   */\n  currentToken() {\n    return this.getToken(this.cursorPos);\n  }\n\n  /**\n   * Searches for a token of the specific type (or types)\n   * in the rest of the token stream (from cursor).\n   *\n   * @param {Array} tokenTypes\n   *    List of tokens to be searched.\n   * @param {boolean} [moveCursor=false]\n   *    Set to true if cursor position needs to be changed.\n   *\n   * @returns {?Token} Token or null if the search was out of range.\n   */\n  findNextToken(tokenTypes, moveCursor) {\n    if (!_.isArray(tokenTypes)) {\n      tokenTypes = [tokenTypes];\n    }\n\n    for (var i = this.cursorPos; i < this.tokens.length; i++) {\n      var currentToken = this.getToken(i);\n      for (var type in tokenTypes) {\n        if (tokenTypes[type] == currentToken.type) {\n          if (moveCursor) {\n            this.cursorPos = i;\n          }\n          return currentToken;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Searches for a token of the specific type (or types) in the rest\n   * of the token stream (from cursor) with respect to opening / closing brackets.\n   *\n   * @param {Array} tokenTypes\n   *    List of tokens to be searched.\n   * @param {boolean} [moveCursor=false]\n   *    Set to true if cursor position needs to be changed.\n   *\n   * @returns {?Token} Token or null if the search was out of range.\n   */\n  findNextTokenAtTheSameLevel(tokenTypes, moveCursor) {\n    if (!_.isArray(tokenTypes)) {\n      tokenTypes = [tokenTypes];\n    }\n\n    var level = 0;\n\n    for (var i = this.cursorPos; i < this.tokens.length; i++) {\n      if (level < 0) {\n        return null;\n      }\n\n      var currentToken = this.getToken(i);\n\n      if (currentToken.isLeftBracket()) {\n        ++level;\n      }\n\n      if (level == 0) {\n        for (var type in tokenTypes) {\n          if (tokenTypes[type] == currentToken.type) {\n            if (moveCursor) {\n              this.cursorPos = i;\n            }\n            return currentToken;\n          }\n        }\n      }\n\n      if (currentToken.isRightBracket()) {\n        --level;\n      }\n    }\n    return null;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/1-lexical/token-stream.js\n **/","var makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar nativeTrimLeft = String.prototype.trimLeft;\n\nmodule.exports = function ltrim(str, characters) {\n  str = makeString(str);\n  if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);\n  characters = defaultToWhiteSpace(characters);\n  return str.replace(new RegExp('^' + characters + '+'), '');\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/underscore.string/ltrim.js\n ** module id = 9\n ** module chunks = 0\n **/","/**\n * Ensure some object is a coerced to a string\n **/\nmodule.exports = function makeString(object) {\n  if (object == null) return '';\n  return '' + object;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/underscore.string/helper/makeString.js\n ** module id = 10\n ** module chunks = 0\n **/","var escapeRegExp = require('./escapeRegExp');\n\nmodule.exports = function defaultToWhiteSpace(characters) {\n  if (characters == null)\n    return '\\\\s';\n  else if (characters.source)\n    return characters.source;\n  else\n    return '[' + escapeRegExp(characters) + ']';\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/underscore.string/helper/defaultToWhiteSpace.js\n ** module id = 11\n ** module chunks = 0\n **/","var makeString = require('./makeString');\n\nmodule.exports = function escapeRegExp(str) {\n  return makeString(str).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/underscore.string/helper/escapeRegExp.js\n ** module id = 12\n ** module chunks = 0\n **/","var makeString = require('./helper/makeString');\nvar defaultToWhiteSpace = require('./helper/defaultToWhiteSpace');\nvar nativeTrimRight = String.prototype.trimRight;\n\nmodule.exports = function rtrim(str, characters) {\n  str = makeString(str);\n  if (!characters && nativeTrimRight) return nativeTrimRight.call(str);\n  characters = defaultToWhiteSpace(characters);\n  return str.replace(new RegExp(characters + '+$'), '');\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/underscore.string/rtrim.js\n ** module id = 13\n ** module chunks = 0\n **/","/**\n * Types of nodes in a syntax tree\n */\nexport class TreeNodeType {\n\n  static EMPTY = 0;\n\n  static SEQUENCE_OF_STATEMENTS = 1;\n  static STATEMENT = 2;\n  static EXPRESSION = 3;\n  static TERM = 4;\n  static POWER = 5;\n  static SYMBOL = 6;\n  static NUMBER = 7;\n  static FUNCTION = 8;\n\n  // Symbol sub-types (detected during semantic analysis).\n  static STANDARD_CONSTANT = 32;\n  static STANDARD_VARIABLE = 33;\n  static STANDARD_FUNCTION = 34;\n\n  // These are statement sub-types (detected during lexical analysis)\n  // static STATEMENT_DEFINITION_VARIABLE = 64\n  // static STATEMENT_DEFINITION_FUNCTION = 65;\n  static STATEMENT_EQUATION = 66;\n  static STATEMENT_INEQUALITY = 67;\n\n  static E_UNPARSED = 128;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/2-syntactic/tree-node-type.js\n **/","import {TreeNodeType} from './tree-node-type';\n\n/**\n * Part of Tree\n */\nexport class TreeNode {\n\n  constructor() {\n    this.type = TreeNodeType.EMPTY;\n    this.brackets = false;\n    this.hasErrors = false;\n  }\n\n  /**\n   * Checks if the node is empty.\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.type == TreeNodeType.EMPTY;\n  }\n\n  /**\n   * Checks if the node is unparsed\n   *\n   * @returns {boolean}\n   */\n  isUnparsed() {\n    return this.type == TreeNodeType.UNPARSED;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/2-syntactic/tree-node.js\n **/","import _ from 'underscore';\nimport {Message}      from '../message';\nimport {MessageList}  from '../message-list';\nimport {Pos}          from '../pos';\nimport {TokenType}    from '../1-lexical/token-type';\nimport {Token}        from '../1-lexical/token';\nimport {TreeNodeType} from './tree-node-type';\nimport {TreeNode}     from './tree-node';\n\n/**\n * Creates an empty instance of Tree object\n */\nexport class Tree {\n  static MAX_NODE_COUNT = 500;\n\n  constructor() {\n    this.reset();\n    this.errors = new MessageList();\n  }\n\n  /**\n   * Calculates hash for the Tree to determine whether it was changed or not\n   */\n  getHash() {\n    //TODO Implement the method\n  }\n\n  /**\n   * Resets the tree to a default empty state.\n   */\n  reset() {\n    this.tokenStream = null;\n    this.root = null;\n  }\n\n  /**\n   * Parses an input stream into a tree of TreeNodes\n   *\n   * @param {Object} tokenStream\n   *    incoming token stream\n   *\n   * @returns {boolean}\n   *      true if the tree was changed.\n   */\n  parse(tokenStream) {\n    this.reset();\n    this.errors.clear();\n\n    this.tokenStream = tokenStream;\n\n    // Check for missed operands between operators\n    // This check is separated because actual parsing ignores errors at some token sequences\n    // (e.g. MINUS PLUS) in order to collect as much more errors as possible.\n    this.checkForMissedOperands();\n\n    // Move token stream cursor to the first position\n    this.tokenStream.firstToken(true);\n\n    // Parse the distinguished symbol of the grammar\n    this.root = this.subparseStatementSequence();\n\n    // Check if an end of Token Stream was reached.\n    if (this.tokenStream.currentToken().type != TokenType.EOF) {\n      this.errors.add(new Message(\n        'e_syn_unknown',\n        this.tokenStream.currentToken().pos\n      ));\n    }\n\n    //XXX return false when no change occurred\n    return true;\n  }\n\n  /**\n   * Parses a sequence of statements, which is\n   * 'statement [SEMICOLON statement ...]'\n   *\n   * @returns {TreeNode}\n   */\n  subparseStatementSequence() {\n\n    var currentNode = this.createEmptyTreeNode();\n    var firstNodeToken = this.tokenStream.currentToken();\n\n    // Extract the first possible sub-node (statement)\n    var currentSubNode = this.subparseStatement();\n\n    ////////////////////////////////\n    // Expression matches a pattern statement [SEMICOLON statement ...]\n    ////////////////////////////////\n    currentNode.subNodes = [];\n    currentNode.subActions = [];\n    currentNode.type = TreeNodeType.SEQUENCE_OF_STATEMENTS;\n\n    // Run till EOF to get all possible errors and statements\n    while (!this.tokenStream.currentToken().isEOF()) {\n      // If The statement separator is semicolon (or a comma, which is an error)\n      if (this.tokenStream.currentToken().type == TokenType.SEMICOLON\n          || this.tokenStream.currentToken().type == TokenType.COMMA) {\n\n        // Add sub-action (semicolon or comma position must be kept)\n        currentNode.subActions.push(this.tokenStream.currentToken());\n\n        // If a separator is a comma, report an error\n        if (this.tokenStream.currentToken().type == TokenType.COMMA) {\n          this.errors.add(new Message(\n              'e_syn_statements_comma',\n              this.tokenStream.currentToken().pos\n            ));\n        }\n\n      // If any other token found on the way\n      } else {\n\n        // If error token found on the way, just skip to the next semicolon or to the end of the stream.\n        // Otherwise add an error.\n\n        // Case 1: Right bracket found\n        if (this.tokenStream.currentToken().isRightBracket()) {\n          this.errors.add(new Message(\n              'e_syn_extra_rb',\n              this.tokenStream.currentToken().pos,\n              {currentToken: this.tokenStream.currentToken()}\n            ));\n        // Case 2: Non-error token found\n        } else if (!this.tokenStream.currentToken().isErrorToken()) {\n          this.errors.add(new Message(\n              'e_syn_statements_wrong_symbol',\n              this.tokenStream.currentToken().pos,\n              {currentToken: this.tokenStream.currentToken()}\n            ));\n        // Case 3: Any other token found\n        } else {\n          // Do nothing\n        }\n\n        // Skip to the next SEMICOLON or to the end of the stream or to the last token\n        if (!this.tokenStream.findNextToken([TokenType.SEMICOLON], true)) {\n          this.tokenStream.lastToken(true);\n        } else {\n          // Add sub-action (semicolon position must be kept)\n          currentNode.subActions.push(this.tokenStream.currentToken());\n          this.tokenStream.previousToken(true);\n        }\n\n        // If the content of the parsed part of the expression is a single\n        // factor, add it as the sub-node for this expression.\n        // This is made for further semantic check of it.\n        if (currentSubNode.type == TreeNodeType.SYMBOL\n            || currentSubNode.type == TreeNodeType.NUMBER\n            || currentSubNode.type == TreeNodeType.FUNCTION) {\n          currentSubNode = this.wrapNode(currentSubNode);\n        }\n\n        currentSubNode.type = TreeNodeType.E_UNPARSED;\n        currentSubNode.hasErrors = true;\n\n        currentSubNode.pos = Pos.unite(currentSubNode.pos, this.tokenStream.currentToken().pos);\n        if (this.tokenStream.currentToken() != this.tokenStream.lastToken()) {\n          this.tokenStream.nextToken(true);\n        }\n      }\n\n      // Move forward\n      this.tokenStream.nextToken(true);\n      currentNode.subNodes.push(currentSubNode);\n      currentSubNode = this.subparseStatement();\n    }\n    currentNode.subNodes.push(currentSubNode);\n\n    ////////////////////////////////\n    // Sequence is just a single statement\n    ////////////////////////////////\n    if (currentNode.subNodes.length == 1 || currentNode.subActions.length == 0) {\n      return currentNode.subNodes[0];\n    }\n\n    // Remove empty sub-node after the last semicolon\n    if (currentNode.subNodes[currentNode.subNodes.length - 1].isEmpty()) {\n      delete currentNode.subNodes[currentNode.subNodes.length - 1];\n    }\n\n    // Get the position of the current node\n    currentNode.pos = Pos.unite(\n        firstNodeToken.pos,\n        this.tokenStream.currentToken().pos\n      );\n\n    return currentNode;\n  }\n\n  /**\n   * Parses a statement, which is\n   * 'expression [(EQUAL|LESS|MORE|MORE_EQUAL|LESS_EQUAL) expression]'\n   * A statement can consist of one or two parts only.\n   *\n   * @returns {TreeNode}\n   */\n  subparseStatement() {\n    var currentNode = this.createEmptyTreeNode();\n    var firstNodeToken = this.tokenStream.currentToken();\n\n    var leftPart = this.subparseExpression();\n    var rightPart = null;\n    var statementSign = null;\n\n    ////////////////////////////////\n    // Statement is expression (EQUAL|LESS|MORE|MORE_EQUAL|LESS_EQUAL) whatever\n    ////////////////////////////////\n\n    if (this.tokenStream.currentToken().isStatementSign()) {\n\n      // Save the sign and parsing the right part\n      statementSign = this.tokenStream.currentToken();\n      this.tokenStream.nextToken(true);\n      rightPart = this.subparseExpression();\n\n      // Check both parts for emptiness\n      if (leftPart.isEmpty()) {\n        this.errors.add(new Message(\n          'e_syn_statement_empty_left',\n          leftPart.pos, {\n            currentToken: statementSign\n          }\n        ));\n      }\n      if (rightPart.isEmpty()) {\n        this.errors.add(new Message(\n          'e_syn_statement_empty_right',\n          rightPart.pos, {\n            currentToken: statementSign\n          }\n        ));\n      }\n\n      // Add left part and right part as node sub-nodes\n      currentNode.type = TreeNodeType.STATEMENT;\n      currentNode.subNodes = [leftPart, rightPart];\n      currentNode.subActions = [statementSign];\n\n      ////////////////////////////////\n      // Define sub-type depending on what is in the left and the right parts\n\n      switch (statementSign.type) {\n      // The statement is an inequality\n      case TokenType.LESS:\n      case TokenType.MORE:\n      case TokenType.LESS_EQUAL:\n      case TokenType.MORE_EQUAL:\n        currentNode.subType = TreeNodeType.STATEMENT_INEQUALITY;\n        break;\n\n      // The statement is something separated with an EQUAL sign\n      //TODO detect STATEMENT_DEFINITION_VARIABLE, STATEMENT_DEFINITION_FUNCTION\n      default:\n        currentNode.subType = TreeNodeType.STATEMENT_EQUATION;\n        break;\n      }\n\n      // Check if there are any other statement signs (which is an error)\n      while (this.tokenStream.currentToken().isStatementSign()) {\n        currentNode.hasErrors = true;\n\n        this.errors.add(new Message(\n            'e_syn_statement_extra_statement_sign',\n            this.tokenStream.currentToken().pos, {\n              currentToken: this.tokenStream.currentToken(),\n              statementSign: statementSign\n            }\n          ));\n\n        currentNode.subActions.push(this.tokenStream.currentToken());\n        this.tokenStream.nextToken(true);\n        currentNode.subNodes.push(this.subparseExpression());\n      }\n\n      currentNode.pos = Pos.unite(firstNodeToken.pos, this.tokenStream\n          .previousToken().pos);\n      return currentNode;\n\n    ///////////////////////////////////\n    // Statement is just a single expression\n    ///////////////////////////////////\n    } else {\n      return leftPart;\n    }\n  }\n\n  /**\n   * Parses an expression, which is\n   * 'term [(ADD|SUBTRACT) term [(ADD|SUBTRACT) term ...]]'\n   *\n   * @returns {TreeNode}\n   */\n  subparseExpression() {\n    var currentNode = this.createEmptyTreeNode();\n    var firstNodeToken = this.tokenStream.currentToken();\n\n    // Extract the first possible sub-node (term)\n    var currentSubNode = this.subparseTerm();\n\n    // /////////////////////////////////\n    // Expression is just a single term\n    // /////////////////////////////////\n    if (!this.tokenStream.currentToken().isExpressionSign()) {\n      return currentSubNode;\n    }\n\n    // //////////////////////////////\n    // Expression matches a pattern term (ADD|) term [(ADD|SUBTRACT) term ...]\n    // //////////////////////////////\n    currentNode.subNodes = [currentSubNode];\n    currentNode.subActions = [];\n    currentNode.type = TreeNodeType.EXPRESSION;\n\n    while (this.tokenStream.currentToken().isExpressionSign()) {\n\n      // Add sub-action\n      currentNode.subActions.push(this.tokenStream.currentToken());\n\n      // If a child is empty and it is not the first term parsed,\n      // mark node as one with errors\n      if (currentSubNode.isEmpty() && currentNode.subNodes.length != 1) {\n        currentNode.hasErrors = true;\n      }\n\n      // Move forward\n      this.tokenStream.nextToken(true);\n      currentSubNode = this.subparseTerm();\n      currentNode.subNodes.push(currentSubNode);\n    }\n\n    // If any of sub-nodes contains errors, mark a node as the one with error\n    _.each(currentNode.subNodes, function(subNode) {\n      if (subNode.hasErrors) {\n        currentNode.hasErrors = true;\n        _.breakLoop();\n      }\n    });\n\n    // Work out case SUBTRACT term.\n    // Replace first empty sub-node with number (0)\n    if (currentNode.subNodes[0].isEmpty()) {\n      if (currentNode.subActions[0].type == TokenType.SUBTRACT) {\n        currentNode.subNodes[0].type = TreeNodeType.NUMBER;\n        currentNode.subNodes[0].value = 0;\n      } else {\n        currentNode.hasErrors = true;\n      }\n    }\n\n    // Get the position of the current node\n    currentNode.pos = Pos.unite(\n        firstNodeToken.pos,\n        this.tokenStream.previousToken().pos\n      );\n\n    return currentNode;\n  }\n\n  /**\n   * Parses a term, which is\n   * 'power [(MULTIPLY/DIVIDE) power [(MULTIPLY/DIVIDE) power ...]]'\n   *\n   * @returns {TreeNode}\n   */\n  subparseTerm() {\n    var currentNode = this.createEmptyTreeNode();\n    var firstNodeToken = this.tokenStream.currentToken();\n    currentNode.type = TreeNodeType.TERM;\n\n    // Extract the first possible sub-node (power)\n    var currentSubNode = this.subparsePower();\n\n    ////////////////////////////////\n    // Term matches pattern 'power(MULTIPLY|DIVIDE|)power [...]'\n    ////////////////////////////////\n    currentNode.subNodes = [currentSubNode];\n    currentNode.subActions = [];\n\n    for (;;) {\n      // If the next token is a (MULTIPLY|DIVIDE)\n      // or any error token but those that subdivide statements\n      if (this.tokenStream.currentToken().isTermSign()\n          || (this.tokenStream.currentToken().isErrorToken()\n              && !this.tokenStream.currentToken().isStatementSign()\n              && !this.tokenStream.currentToken().isNumber()\n              && !this.tokenStream.currentToken().isLeftBracket() && !this.tokenStream\n              .currentToken().isRightBracket())) {\n        if (this.tokenStream.currentToken().isErrorToken()) {\n          currentNode.hasErrors = true;\n        }\n        currentNode.subActions.push(this.tokenStream.currentToken());\n\n        this.tokenStream.nextToken(true);\n        currentSubNode = this.subparsePower();\n        currentNode.subNodes.push(currentSubNode);\n\n      // Check the case of missing sign MULTIPLE,\n      // e.g NUMBER SYMBOL or NUMBER LB\n      } else if (this.tokenStream.currentToken().isNumber()\n          || this.tokenStream.currentToken().isLeftBracket()\n          || this.tokenStream.currentToken().isSymbol()) {\n        if (this.tokenStream.previousToken().isNumber()\n            && (this.tokenStream.currentToken().isSymbol()\n              || this.tokenStream.currentToken().isLeftBracket())) {\n          // It is still not an error in case NUMBER SYMBOL or NUMBER LB\n          // or the previous token is an error token\n        } else {\n          currentNode.hasErrors = true;\n\n          // An error will show up only if the previous token\n          //  is not an error token or any number token\n          if (!(this.tokenStream.previousToken().isErrorToken() && !this.tokenStream.previousToken().isMathOperator())\n              || this.tokenStream.previousToken().isNumber()) {\n            this.errors.add(new Message('e_syn_missing_multiply',\n                Pos.between(\n                  this.tokenStream.previousToken().pos,\n                  this.tokenStream.currentToken().pos), {\n                    previousToken: this.tokenStream\n                    .previousToken()\n                    .cloneWithCorrectedType(),\n                    currentToken: this.tokenStream.currentToken()\n                    .cloneWithCorrectedType()\n                  }));\n          }\n        }\n\n        var pseudoMultiplyToken = new Token(TokenType.MULTIPLY);\n        pseudoMultiplyToken.pos = Pos.between(\n            this.tokenStream.previousToken().pos,\n            this.tokenStream.currentToken().pos\n          );\n\n        currentNode.subActions.push(pseudoMultiplyToken);\n        currentSubNode = this.subparsePower();\n        currentNode.subNodes.push(currentSubNode);\n\n      // If any error token found, use it to split sub-nodes and parse further nodes\n      } else {\n        break;\n\n      }\n    }\n\n    ///////////////////////////////\n    // Term is a single power (only one sub-node found)\n    ///////////////////////////////\n    if (currentNode.subNodes.length == 1) {\n      return currentNode.subNodes[0];\n    }\n\n    // If any of sub-nodes is empty or contains error,\n    // mark a node as the one with error.\n    _.each(currentNode.subNodes, function(subNode) {\n      if (subNode.hasErrors || subNode.type == TreeNodeType.EMPTY) {\n        currentNode.hasErrors = true;\n        _.breakLoop();\n      }\n    });\n\n    // Get the position of the current node\n    currentNode.pos = Pos.unite(\n      firstNodeToken.pos,\n      this.tokenStream.previousToken().pos\n    );\n\n    currentNode.type = TreeNodeType.TERM;\n    return currentNode;\n  }\n\n  /**\n   * Parses a power, which is\n   * 'factor [(POWER) factor [(POWER) factor ...]]'\n   *\n   * @returns {TreeNode}\n   */\n  subparsePower() {\n    var currentNode = this.createEmptyTreeNode();\n    var firstNodeToken = this.tokenStream.currentToken();\n\n    // Extract the first possible sub-node (power)\n    var currentSubNode = this.subparseFactor();\n\n    //////////////////////////////\n    // Power is just a single factor\n    //////////////////////////////\n    if (!this.tokenStream.currentToken().isPowerSign()) {\n      return currentSubNode;\n    }\n\n    //////////////////////////////\n    // Power matches a pattern factor (POWER) factor [(POWER)factor) ...]\n    //////////////////////////////\n    currentNode.subNodes = [currentSubNode];\n    currentNode.subActions = [];\n\n    while (this.tokenStream.currentToken().isPowerSign()) {\n      currentNode.subActions.push(this.tokenStream.currentToken().type);\n\n      this.tokenStream.nextToken(true);\n      currentSubNode = this.subparseFactor();\n      currentNode.subNodes.push(currentSubNode);\n    }\n\n    // If any of sub-nodes is empty or contains error,\n    // mark a node as the one with error\n    _.each(currentNode.subNodes, function(subNode) {\n      if (subNode.hasErrors || subNode.type == TreeNodeType.EMPTY) {\n        currentNode.hasErrors = true;\n        _.breakLoop();\n      }\n    });\n\n    // Get the position of the current node\n    currentNode.pos = Pos.unite(\n        firstNodeToken.pos,\n        this.tokenStream.previousToken().pos\n      );\n\n    currentNode.type = TreeNodeType.POWER;\n    return currentNode;\n  }\n\n  /**\n   * Parses a factor, which can be a number, a symbol, a function\n   * (symbol with the following left bracket) or an expression in braces.\n   *\n   * @returns {TreeNode}\n   */\n  subparseFactor() {\n    var currentNode = this.createEmptyTreeNode();\n    var firstNodeToken = this.tokenStream.currentToken();\n\n    // Depending on the type of a token, parse a factor differently\n    if (firstNodeToken.isNumber()) {\n\n      /////////////////////\n      // Factor is a Number\n      /////////////////////\n\n      currentNode.type = TreeNodeType.NUMBER;\n      currentNode.pos = this.tokenStream.currentToken().pos;\n      currentNode.value = this.tokenStream.currentToken().value;\n      this.tokenStream.nextToken(true);\n\n      return currentNode;\n\n    // Factor is a function or a symbol\n    } else if (firstNodeToken.type == TokenType.SYMBOL) {\n\n      // Check for a left bracket after the symbol\n      if (this.tokenStream.nextToken().isLeftBracket()) {\n\n        ///////////////////////\n        // Factor is a function\n        ///////////////////////\n\n        currentNode.type = TreeNodeType.FUNCTION;\n        currentNode.name = this.tokenStream.currentToken().value;\n        currentNode.namePos = this.tokenStream.currentToken().pos;\n        currentNode.nameRaw = this.tokenStream.currentToken().raw;\n        currentNode.subNodes = [];\n\n        // Skip over a left bracket and remember the position\n        // of the beginning of the arguments\n        this.tokenStream.nextToken(true);\n        currentNode.argumentPos = Pos.ending(\n            this.tokenStream.currentToken().pos\n          );\n        this.tokenStream.nextToken(true);\n\n        // Parse arguments\n        if (this.tokenStream.currentToken().isRightBracket()) {\n\n          //////////////////////////////////////\n          // Case one: Function has no arguments\n\n          // Get the position of the current node\n          currentNode.pos = Pos.unite(\n              firstNodeToken.pos,\n              this.tokenStream.currentToken().pos\n            );\n\n          // Update the position of the arguments\n          currentNode.argumentPos = Pos.between(\n              currentNode.argumentPos,\n              this.tokenStream.currentToken().pos\n            );\n\n          // Move cursor one token right\n          this.tokenStream.nextToken(true);\n\n          return currentNode;\n\n        } else {\n\n          //////////////////////////////////////\n          // Case two: There is no right bracket after the left one\n          // Try to parse arguments\n\n          var currentArgument;\n\n          for (;;) {\n            // Get an argument, which is an expression\n            currentArgument = this.subparseExpression();\n\n            // Add an argument as a sub-node.\n            currentNode.subNodes.push(currentArgument);\n\n            if (this.tokenStream.currentToken().isRightBracket()\n                || this.tokenStream.currentToken().type == TokenType.COMMA\n                || this.tokenStream.currentToken().type == TokenType.SEMICOLON) {\n              // Check if an argument is empty and add an error if so\n              if (currentArgument.type == TreeNodeType.EMPTY) {\n                currentArgument.pos = Pos.between(\n                    this.tokenStream.previousToken().pos,\n                    this.tokenStream.currentToken().pos\n                  );\n                currentNode.hasErrors = true;\n                this.errors.add(new Message(\n                    'e_syn_function_argument_empty',\n                    currentArgument.pos\n                  ));\n              }\n            }\n\n            // Check for a right bracket\n            if (this.tokenStream.currentToken().isRightBracket()) {\n              // Get the position of the current node\n              currentNode.pos = Pos.unite(\n                  firstNodeToken.pos,\n                  this.tokenStream.currentToken().pos\n                );\n\n              // Update the position of the arguments\n              currentNode.argumentPos = Pos.between(\n                  currentNode.argumentPos,\n                  this.tokenStream.currentToken().pos\n                );\n\n              // Skip a bracket and return a node\n              this.tokenStream.nextToken(true);\n              return currentNode;\n            }\n\n            // Right bracket not found – check for a comma or a semicolon\n            if (this.tokenStream.currentToken().type == TokenType.COMMA\n                || this.tokenStream.currentToken().type == TokenType.SEMICOLON) {\n              // It is an error if it is a semicolon\n              if (this.tokenStream.currentToken().type == TokenType.SEMICOLON) {\n                this.errors.add(new Message(\n                    'e_syn_function_argument_semicolon',\n                    this.tokenStream.currentToken().pos\n                  ));\n                currentNode.hasErrors = true;\n              }\n              // Skip over a comma / semicolon\n              this.tokenStream.nextToken(true);\n              continue;\n            }\n\n            // Any other token is unexpected here\n            currentNode.hasErrors = true;\n\n            if (!this.tokenStream.currentToken().isEOF()) {\n              // If the content of the parsed part of the expression\n              // is a single factor, add it as the sub-node for this expression.\n              // This is made for further semantic check of it.\n              if (currentArgument.type == TreeNodeType.SYMBOL\n                  || currentArgument.type == TreeNodeType.NUMBER\n                  || currentArgument.type == TreeNodeType.FUNCTION) {\n                currentArgument = this.wrapNode(currentArgument);\n                currentArgument.hasErrors = true;\n                currentNode.subNodes.pop();\n                currentNode.subNodes.push(currentArgument);\n              }\n\n              currentArgument.type = TreeNodeType.E_UNPARSED;\n              if (!this.tokenStream.currentToken().isErrorToken()) {\n                this.errors.add(new Message(\n                    'e_syn_function_argument_wrong_symbol',\n                    this.tokenStream.currentToken().pos,\n                    {currentToken: this.tokenStream.currentToken()}\n                  ));\n              }\n            }\n\n            // Look for the stop-symbol (next right bracket of the\n            // same level or a comma) to continue parsing after it\n            var stopSymbol = this.tokenStream.findNextTokenAtTheSameLevel([\n              TokenType.RB_RIGHT,\n              TokenType.E_SB_RIGHT,\n              TokenType.COMMA,\n              TokenType.SEMICOLON\n            ], true);\n\n            // A stop symbol was found\n            if (stopSymbol) {\n              currentArgument.pos = Pos.unite(\n                  currentArgument.pos,\n                  this.tokenStream.previousToken().pos\n                );\n\n              // Continue if a stop-symbol is comma\n              if (stopSymbol.type == TokenType.COMMA) {\n                // Skip a comma\n                this.tokenStream.nextToken(true);\n                continue;\n              }\n              currentNode.pos = Pos.unite(\n                  firstNodeToken.pos,\n                  this.tokenStream.currentToken().pos\n                );\n              this.tokenStream.nextToken(true);\n\n            // A stop symbol was not found – move to the end of the TokenStream\n            } else {\n              this.tokenStream.lastToken(true);\n              currentNode.pos = Pos.unite(\n                  firstNodeToken.pos,\n                  this.tokenStream.lastToken().pos\n                );\n              this.errors.add(new Message(\n                  'e_syn_missing_rb',\n                  Pos.ending(this.tokenStream.currentToken().pos)\n                ));\n              this.tokenStream.nextToken(true);\n            }\n\n            // Update the position of the arguments\n            currentNode.argumentPos = Pos.between(\n                currentNode.argumentPos,\n                this.tokenStream.previousToken().pos\n              );\n            return currentNode;\n          }\n        }\n      } else {\n\n        //////////////////////////\n        // Factor is just a symbol\n        //////////////////////////\n\n        currentNode.type = TreeNodeType.SYMBOL;\n        currentNode.pos = this.tokenStream.currentToken().pos;\n        currentNode.name = this.tokenStream.currentToken().value;\n        currentNode.nameRaw = this.tokenStream.currentToken().raw;\n        this.tokenStream.nextToken(true);\n\n        return currentNode;\n      }\n    } else if (this.tokenStream.currentToken().isLeftBracket()) {\n\n      //////////////////////////////////////\n      // Factor is an expression in brackets\n      //////////////////////////////////////\n\n      // Skip left bracket\n      this.tokenStream.nextToken(true);\n\n      // Extract an expression inside the brackets\n      currentNode = this.subparseExpression();\n\n      // Check for the right bracket\n      // -- A Bracket was found\n      if (this.tokenStream.currentToken().isRightBracket()) {\n        // Error if expression in brackets is empty\n        if (currentNode.type == TreeNodeType.EMPTY && !currentNode.brackets) {\n          this.errors.add(new Message(\n              'e_syn_brackets_empty',\n              Pos.unite(\n                  this.tokenStream.previousToken().pos,\n                  this.tokenStream.currentToken().pos\n                )\n            ));\n          this.hasErrors = true;\n        }\n        currentNode.brackets = true;\n        this.tokenStream.nextToken(true);\n        return currentNode;\n\n      // -- Any other token found\n      } else {\n\n        // If the content of the parsed part of the expression is a single\n        // factor, add it as the sub-node to this expression\n        // This is made for further semantic check of it\n        if (currentNode.type == TreeNodeType.SYMBOL\n            || currentNode.type == TreeNodeType.NUMBER\n            || currentNode.type == TreeNodeType.FUNCTION) {\n          currentNode = this.wrapNode(currentNode);\n        }\n\n        currentNode.hasErrors = true;\n        currentNode.type = TreeNodeType.E_UNPARSED;\n\n        if (!this.tokenStream.currentToken().isErrorToken()\n            && !this.tokenStream.currentToken().isEOF()\n            && this.tokenStream.currentToken().type != TokenType.SEMICOLON) {\n          this.errors.add(new Message(\n            'e_syn_brackets_wrong_symbol',\n            this.tokenStream.currentToken().pos,\n            {currentToken: this.tokenStream.currentToken()}\n          ));\n        }\n\n        // Look for a stop-symbol (next right bracket of the same level)\n        // to continue parsing after it\n        let stopSymbol = this.tokenStream.findNextTokenAtTheSameLevel([\n          TokenType.RB_RIGHT,\n          TokenType.E_SB_RIGHT,\n          TokenType.SEMICOLON\n        ], true);\n\n        // Stop-symbol was found\n        if (stopSymbol) {\n          // A bracket was found\n          if (stopSymbol.isRightBracket()) {\n            currentNode.pos = Pos.unite(\n                firstNodeToken.pos,\n                this.tokenStream.currentToken().pos\n              );\n            this.tokenStream.nextToken(true);\n          // A SEMICOLON was found\n          } else {\n            currentNode.pos = Pos.unite(\n                firstNodeToken.pos,\n                this.tokenStream.previousToken().pos\n              );\n            this.errors.add(\n              new Message('e_syn_missing_rb',\n              Pos.ending(currentNode.pos)\n            ));\n          }\n        // A bracket was not found – move to the end of the TokenStream\n        } else {\n          this.tokenStream.lastToken(true);\n          currentNode.pos = Pos.unite(\n              firstNodeToken.pos,\n              this.tokenStream.lastToken().pos\n            );\n          this.errors.add(new Message(\n              'e_syn_missing_rb',\n              Pos.ending(currentNode.pos)\n            ));\n          this.tokenStream.nextToken(true);\n        }\n      }\n    }\n\n    //////////////////////\n    // Factor is malformed\n    //////////////////////\n\n    // Try to unite all unknown tokens into the factor together with numbers and symbols between them\n    if (this.tokenStream.currentToken().isErrorToken()\n        && !this.tokenStream.currentToken().isMathOperator()\n        && !this.tokenStream.currentToken().isRightBracket()) {\n      currentNode.type = TreeNodeType.UNPARSED;\n      while ((\n            this.tokenStream.currentToken().isErrorToken()\n            && !this.tokenStream.currentToken().isMathOperator()\n          ) || (\n            (this.tokenStream.currentToken().isNumber() || this.tokenStream.currentToken().isSymbol())\n            && this.tokenStream.nextToken().isErrorToken() && !this.tokenStream.nextToken().isMathOperator()\n          )) {\n        this.tokenStream.nextToken(true);\n      }\n      currentNode.pos = Pos.unite(\n          firstNodeToken.pos,\n          this.tokenStream.currentToken().pos\n        );\n    }\n\n    return currentNode;\n  }\n\n  /**\n   * Creates a blank tree node.\n   * This function helps at the beginning of each subparseXXX function.\n   *\n   * @returns {TreeNode}\n   */\n  createEmptyTreeNode() {\n    //TODO Add a counter to catch “too long math stuff” error\n    /** @type TreeNode */\n    var result = new TreeNode();\n    if (this.tokenStream.currentToken() == this.tokenStream.firstToken()) {\n      result.pos = Pos.between(\n          new Pos(0, 0, 0, 0),\n          this.tokenStream.currentToken().pos\n        );\n    } else {\n      result.pos = Pos.between(\n          this.tokenStream.previousToken().pos,\n          this.tokenStream.currentToken().pos\n        );\n    }\n    return result;\n  }\n\n  /**\n   * Is used in sub-parsing expressions, terms and powers.\n   * Detects empty operands in the entire token stream.\n   */\n  checkForMissedOperands() {\n    this.tokenStream.firstToken(true);\n    var previousToken;\n    var currentToken;\n    var nextToken;\n\n    do {\n      currentToken = this.tokenStream.currentToken();\n\n      // The check applies to any mathematical operator in a token stream.\n      if (currentToken.isMathOperator() && !currentToken.isErrorToken()) {\n        previousToken = this.tokenStream.previousToken();\n        nextToken = this.tokenStream.nextToken();\n\n        // Case an operator appears at the beginning of something (except SUBTRACTION sign)\n        if (currentToken.type != TokenType.SUBTRACT\n            && (!previousToken || !(previousToken.isMathOperator()\n                || previousToken.isRightBracket()\n                || previousToken.isNumber() || previousToken\n                .isSymbol()))) {\n          this.errors.add(new Message(\n              'e_syn_missing_operand_at_begin',\n              Pos.beginning(this.tokenStream.currentToken().pos),\n              {currentToken: currentToken}\n            ));\n        }\n\n        // Case an operator is followed by another operator\n        if (nextToken && nextToken.isMathOperator()\n            && !nextToken.isErrorToken()) {\n          this.errors.add(new Message(\n              'e_syn_missing_operand',\n              Pos.between(currentToken.pos, nextToken.pos), {\n                previousToken: currentToken,\n                currentToken: nextToken\n              }\n            ));\n        }\n\n        // Case an operator appears at the end of something\n        if (!nextToken\n            || !(nextToken.isMathOperator() || nextToken.isNumber()\n                || nextToken.isSymbol() || nextToken\n                .isLeftBracket())\n            && nextToken.type !== TokenType.E_REST) {\n          this.errors.add(new Message(\n              'e_syn_missing_operand_at_end',\n              Pos.between(currentToken.pos, nextToken.pos), {\n                currentToken: currentToken\n              }\n            ));\n        }\n      }\n    } while (this.tokenStream.nextToken(true));\n  }\n\n  /**\n   * Wraps a node with another node.\n   *\n   * @param {TreeNode} nodeToBeWrapped\n   *    source node\n   *\n   * @returns {TreeNode}\n   */\n  wrapNode(nodeToBeWrapped) {\n    var wrapperNode = this.createEmptyTreeNode();\n    wrapperNode.subNodes = [nodeToBeWrapped];\n    wrapperNode.pos = nodeToBeWrapped.pos;\n    wrapperNode.hasErrors = nodeToBeWrapped.hasErrors;\n    return wrapperNode;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/2-syntactic/tree.js\n **/","import _ from 'underscore';\n\n/**\n * Represents a single validation rule.\n */\nexport class ValidationRule {\n\n  static NO = 0;\n  static ONLY = 1;\n  static EXCLUDING = 2;\n  static YES = 4;\n\n  /**\n  * @param {Object} value\n  *    The rule itself (yes/no/including/excluding)\n  * @param {Object} listOrParams\n  *    Some additional parameters of the rule or a list.\n  */\n  constructor(value, listOrParams) {\n    if (!value) {\n      value = ValidationRule.NO;\n    }\n    this.value = value;\n\n    if (_.isArray(listOrParams)) {\n      this.list = listOrParams;\n    } else if (listOrParams != null) {\n      _.extend(this, listOrParams);\n    }\n  }\n\n  /**\n   * Helps to determine using a short notation if the rule has type NO.\n   *\n   * @returns {boolean}\n   */\n  isNo() {\n    return this.value == ValidationRule.NO;\n  }\n\n  /**\n   * Helps to determine using a short notation if the rule has type ONLY.\n   *\n   * @returns {boolean}\n   */\n  isOnly() {\n    return this.value == ValidationRule.ONLY;\n  }\n\n  /**\n   * Helps to determine using a short notation if the rule has type EXCLUDING.\n   *\n   * @returns {boolean}\n   */\n  isExcluding() {\n    return this.value == ValidationRule.EXCLUDING;\n  }\n\n  /**\n   * Helps to determine using a short notation if the rule has type YES.\n   *\n   * @returns {boolean}\n   */\n  isYes() {\n    return this.value == ValidationRule.YES;\n  }\n }\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/3-semantic/validation-rule.js\n **/","import _ from 'underscore';\nimport {ValidationRule} from './validation-rule';\n\n/**\n * ValidationRules are used by Validator to find errors\n *  in a Tree. Depending on the set of rules, an output of\n *  the validator can be different.\n *\n * @see StandardValidationRules for a preset list of rules\n *\n */\nexport class ValidationRules {\n\n  /**\n   * All rules are NO by default.\n   */\n  constructor() {\n    this.allowFunctions = new ValidationRule();\n    this.allowConstants = new ValidationRule();\n    this.allowVariables = new ValidationRule();\n\n    // this.acceptMathOperations = new ValidationRule();\n    this.acceptEquations = new ValidationRule();\n    this.acceptInequalities = new ValidationRule();\n    this.acceptSequenceOfStatements = new ValidationRule();\n    this.acceptEmpty = new ValidationRule();\n    this.acceptOnlyNumber = new ValidationRule();\n\n    this.valueOnlyFinite = new ValidationRule();\n    this.valueOnlyInteger = new ValidationRule();\n    this.valueRange = new ValidationRule();\n    this.valueOnlyGreaterThan = new ValidationRule();\n    this.valueOnlyLessThan = new ValidationRule();\n  }\n\n  /**\n   * Sets a certain rule.\n   *\n   * @param {string} name\n   *    Name of the rule.\n   * @param {number} [value]\n   *    Value of a rule. NO by default.\n   * @param {string[]} [list]\n   *    List of exclusions.\n   * @returns {ValidationRules}\n   *      Current object (OK for method chaining).\n   */\n  setRule(name, value, list) {\n    this[name] = new ValidationRule(value, list);\n    return this;\n  }\n\n  /**\n   * Returns a deep copy of the set of validation rules.\n   *\n   * @returns {ValidationRules}\n   *      Current object (OK for method chaining).\n   */\n  clone() {\n    var result = new ValidationRules();\n    _.extend(result, _.map(this, _.clone));\n    return result;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/3-semantic/validation-rules.js\n **/","import _ from 'underscore';\nimport {Message}      from '../message';\nimport {MessageList}  from '../message-list';\nimport {Pos}          from '../pos';\nimport {TokenType}    from '../1-lexical/token-type';\nimport {TreeNodeType} from '../2-syntactic/tree-node-type';\n\n/**\n * Validator applies semantic analysis on Text.\n * It visits Tree instance and finds semantic\n * errors depending on what rule set is currently used.\n */\nexport class Validator {\n  constructor() {\n    this.errors = new MessageList();\n    //XXX start using warnings\n    this.warnings = new MessageList();\n  }\n\n  /**\n   * Validates a tree of nodes.\n   * Also adds “id” property to each constant, variable or function,\n   * which corresponds to a symbol id (and alias in the WEST Dialect)\n   *\n   * @param {Tree} tree\n   *    Input tree.\n   * @param {Symbols} symbols\n   *    Symbols being used.\n   * @param {ValidationRules} rules\n   *    Set of validation rules being used.\n   * @param {Calculator} [calculator]\n   *    If present, it is attempted to calculate the value of the tree and validate it.\n   *\n   * @returns {boolean}\n   *      true if any changes were made before the previous validation.\n   */\n  validate(tree, symbols, rules, calculator) {\n\n    this.errors.clear();\n\n    // Check for emptiness\n    if (rules.acceptEmpty.isNo() && tree.root.isEmpty()) {\n      this.errors.add(new Message('e_sem_forbidden_empty', tree.root.pos));\n    } else {\n      // Recursively validate a tree\n      this.validateNode(tree.root, symbols, rules);\n    }\n\n    // Validate value if needed\n    if (calculator && this.errors.isEmpty()) {\n      // Calculate cached values of the tree nodes\n      // to get the value of the tree if possible.\n      calculator.calculateCachedValues(tree.root);\n\n      // Apply some additional rules\n      // -- if Accepting only integers\n      if (rules.valueOnlyInteger.isYes()\n          && isFinite(tree.root.value)\n          && Math.round(tree.root.value) != tree.root.value) {\n        this.errors.add(new Message(\n            'e_sem_expected_int',\n            tree.root.pos,\n            {value: tree.root.value}\n          ));\n\n      // -- if accepting only finite numbers\n      } else if (rules.valueOnlyFinite.isYes() && !isFinite(tree.root.value)) {\n        this.errors.add(new Message(\n            'e_sem_expected_finite',\n            tree.root.pos,\n            {value: tree.root.value}\n          ));\n      }\n\n      // -- if accepting only a number of some range\n      if (rules.valueRange.isOnly()\n          && isFinite(tree.root.value)\n          && (tree.root.value < rules.valueRange.min || tree.root.value > rules.valueRange.max)) {\n        this.errors.add(new Message(\n            'e_sem_expected_range',\n            tree.root.pos,\n            {value: tree.root.value,range: rules.valueRange}\n          ));\n      }\n\n      // -- if Accepting only numbers more than a number\n      if (rules.valueOnlyGreaterThan.isYes()\n          && isFinite(tree.root.value)\n          && isFinite(rules.valueOnlyGreaterThan.bound)\n          && tree.root.value <= rules.valueOnlyGreaterThan.bound) {\n        this.errors.add(new Message(\n            'e_sem_expected_gt',\n            tree.root.pos,\n            {value: tree.root.value, bound: rules.valueOnlyGreaterThan.bound}\n          ));\n      }\n\n      // -- if Accepting only numbers less than a number\n      if (rules.valueOnlyLessThan.isYes()\n          && isFinite(tree.root.value)\n          && tree.root.value >= rules.valueOnlyLessThan.bound) {\n        this.errors.add(new Message(\n            'e_sem_expected_lt',\n            tree.root.pos,\n            {value: tree.root.value,bound: rules.valueOnlyLessThan.bound}\n          ));\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Recursively validates a tree node\n   *\n   * @param {TreeNoe} treeNode\n   * @param {Symbols} symbols\n   *    Symbols being used.\n   * @param {ValidationRules} rules\n   *    Set of validation rules being used.\n   */\n  validateNode(treeNode, symbols, rules) {\n    var symbolId;\n    var possibleMessageParams;\n\n    switch (treeNode.type) {\n    /////////////////////////////\n    // Constant, variable or a misused function name / unknown symbol\n    /////////////////////////////\n\n    case TreeNodeType.SYMBOL:\n\n      ///////////\n      // Constant\n\n      // Check a symbol in a list of standard constants\n      symbolId = symbols.findConstant(treeNode.name);\n      possibleMessageParams =\n      {\n        name: treeNode.nameRaw,\n        id: symbolId\n      };\n\n      if (symbolId) {\n\n        // Keep node sub-type and the id of the constant in the node.\n        treeNode.id = symbolId;\n        treeNode.subType = TreeNodeType.STANDARD_CONSTANT;\n\n        // All constants are forbidden here.\n        if (rules.allowConstants.isNo()) {\n          this.errors.add(new Message('e_sem_constant_forbidden_all', treeNode.pos, possibleMessageParams));\n\n        // This constant is forbidden here.\n        } else if ((rules.allowConstants.isOnly() && _.indexOf(rules.allowConstants.list, symbolId) == -1)\n            || (rules.allowConstants.isExcluding() && _.indexOf(rules.allowConstants.list, symbolId) !== -1)) {\n          this.errors.add(new Message('e_sem_constant_forbidden_this', treeNode.pos, possibleMessageParams));\n        }\n\n        return;\n      }\n\n      /////////////////////////////\n      // Variable\n      // Check a symbol in a list of variables\n      symbolId = symbols.findVariable(treeNode.name);\n      possibleMessageParams =\n      {\n        name: treeNode.nameRaw,\n        id: symbolId\n      };\n\n      if (symbolId) {\n\n        // Keep node sub-type and the id of the variable in the node.\n        treeNode.id = symbolId;\n        treeNode.subType = TreeNodeType.STANDARD_VARIABLE;\n\n        // All variables are forbidden here.\n        if (rules.allowVariables.isNo()) {\n          this.errors.add(new Message('e_sem_variable_forbidden_all', treeNode.pos, possibleMessageParams));\n\n        // This variable is forbidden here.\n        } else if ((rules.allowVariables.isOnly() && _.indexOf(rules.allowVariables.list, symbolId) == -1)\n            || (rules.allowVariables.isExcluding() && _.indexOf(rules.allowVariables.list, symbolId) !== -1)) {\n          this.errors.add(new Message('e_sem_variable_forbidden_this', treeNode.pos, possibleMessageParams));\n        }\n        return;\n      }\n\n      /////////////////////////////\n      // Function name as a symbol\n      // Check a symbol in a list of standard functions\n      symbolId = symbols.findFunction(treeNode.name);\n      if (symbolId) {\n        this.errors.add(new Message('e_sem_function_as_symbol', treeNode.pos,{name: treeNode.nameRaw, id: symbolId}));\n        return;\n      }\n\n      /////////////////////////////\n      // Unknown symbol\n      this.errors.add(new Message('e_sem_unknown_symbol', treeNode.pos, {name: treeNode.nameRaw}));\n      return;\n\n    /////////////////////////////\n    // Function (or a misused constant or variable name)\n    /////////////////////////////\n    case TreeNodeType.FUNCTION:\n\n      // Validate subNodes of a function\n      this.validateSubNodes(treeNode, symbols, rules);\n\n      // Check a function name in a list of standard functions\n      symbolId = symbols.findFunction(treeNode.name);\n      possibleMessageParams =\n      {\n        name: treeNode.nameRaw,\n        id: symbolId\n      };\n\n      if (symbolId) {\n\n        // Keep node sub-type and the ID of the function in the node.\n        treeNode.id = symbolId;\n        treeNode.subType = TreeNodeType.STANDARD_FUNCTION;\n\n        // All functions are forbidden here.\n        if (rules.allowFunctions.isNo()) {\n          this.errors.add(new Message(\n              'e_sem_function_forbidden_all',\n              treeNode.namePos,\n              possibleMessageParams\n          ));\n\n        // This function is forbidden here.\n        } else if ((rules.allowFunctions.isOnly()\n                && _.indexOf(rules.allowFunctions.list, symbolId) == -1)\n            || (rules.allowFunctions.isExcluding()\n                && _.indexOf(rules.allowFunctions.list, symbolId) !== -1)) {\n          this.errors.add(new Message(\n              'e_sem_function_forbidden_this',\n              treeNode.namePos,\n              possibleMessageParams\n            ));\n        }\n\n        // Check argument count for the function.\n        var argumentCount = symbols.functions[symbolId].argumentCount;\n        var realArgumentCount = treeNode.subNodes.length;\n        var errorPos;\n\n        possibleMessageParams = {\n          name: treeNode.nameRaw,\n          argumentCount: argumentCount,\n          realArgumentCount: realArgumentCount\n        };\n        // -- Case 1: function accepts exactly argumentCount arguments.\n        if (_.isNumber(argumentCount)) {\n          // Passed too much arguments.\n          if (realArgumentCount > argumentCount) {\n            if (treeNode.subNodes[argumentCount - 1]) {\n              errorPos = Pos.unite(\n                  Pos.ending(treeNode.subNodes[argumentCount - 1].pos),\n                  Pos.ending(treeNode.argumentPos)\n              );\n            } else {\n              errorPos = treeNode.argumentPos;\n            }\n            this.errors.add(new Message(\n                'e_sem_function_arguments_extra_exact',\n                errorPos,\n                possibleMessageParams\n              ));\n\n          // Passed too few arguments.\n          } else if (realArgumentCount < argumentCount) {\n            errorPos = realArgumentCount\n                  ? Pos.unite(Pos.ending(\n                      treeNode.subNodes[realArgumentCount - 1].pos),\n                      Pos.ending(treeNode.argumentPos)\n                    )\n                  : treeNode.argumentPos;\n            this.errors.add(new Message(\n                'e_sem_function_arguments_few_exact',\n                errorPos,\n                possibleMessageParams\n              ));\n          }\n\n        // -- Case 2: Function accepts from argumentCount.min to argumentCount.max arguments.\n        } else {\n          // -- Case 2.1: Upper bound for argument count in Infinity.\n          if (argumentCount.max == Infinity) {\n            // Passed too few arguments\n            if (realArgumentCount < argumentCount.min) {\n              errorPos = realArgumentCount\n                  ? Pos.unite(\n                      Pos.ending(treeNode.subNodes[realArgumentCount - 1].pos),\n                      Pos.ending(treeNode.argumentPos)\n                    )\n                  : treeNode.argumentPos;\n              this.errors.add(new Message(\n                  'e_sem_function_arguments_few_range_n_inf',\n                  errorPos,\n                  possibleMessageParams\n                ));\n            }\n\n          // -- Case 2.2: Both Upper bound and lower bound are numbers.\n          } else {\n            if (realArgumentCount < argumentCount.min) {\n              errorPos = realArgumentCount\n                  ? Pos.unite(\n                      Pos.ending(treeNode.subNodes[realArgumentCount - 1].pos),\n                      Pos.ending(treeNode.argumentPos)\n                    )\n                  : treeNode.argumentPos;\n              this.errors.add(new Message(\n                  'e_sem_function_arguments_few_range_n_n',\n                  errorPos,\n                  possibleMessageParams\n                ));\n            } if (realArgumentCount > argumentCount.max) {\n              errorPos = Pos.unite(\n                  Pos.ending(treeNode.subNodes[argumentCount.max - 1].pos),\n                  Pos.ending(treeNode.argumentPos)\n                );\n              this.errors.add(new Message(\n                  'e_sem_function_arguments_extra_range_n_n',\n                  errorPos,\n                  possibleMessageParams\n                ));\n            }\n          }\n        }\n        return;\n      }\n\n      /////////////////////////////\n      // Constant name as a function\n      // Check a symbol in a list of standard constants\n      symbolId = symbols.findConstant(treeNode.name);\n      if (symbolId) {\n        this.errors.add(new Message(\n            'e_sem_constant_as_function',\n            treeNode.namePos,\n            {name: treeNode.nameRaw, id: symbolId}\n          ));\n        return;\n      }\n      /////////////////////////////\n      // Variable name as a function\n      // Check a symbol in a list of standard variables\n      symbolId = symbols.findVariable(treeNode.name);\n      if (symbolId) {\n        this.errors.add(new Message(\n            'e_sem_variable_as_function',\n            treeNode.namePos,\n            {name: treeNode.nameRaw, id: symbolId}\n          ));\n        return;\n      }\n\n      /////////////////////////////\n      // Unknown function\n      this.errors.add(new Message(\n          'e_sem_unknown_function',\n          treeNode.namePos,\n          {name: treeNode.nameRaw}\n        ));\n      return;\n\n    /////////////////////////////\n    // Inequality or equation\n    /////////////////////////////\n    case TreeNodeType.STATEMENT:\n      if (treeNode.subType == TreeNodeType.STATEMENT_EQUATION && rules.acceptEquations.isNo()) {\n        this.errors.add(new Message('e_sem_forbidden_equation', treeNode.subActions[0].pos));\n      } else if (treeNode.subType == TreeNodeType.STATEMENT_INEQUALITY && rules.acceptInequalities.isNo()) {\n        this.errors.add(new Message('e_sem_forbidden_inequality', treeNode.subActions[0].pos));\n      }\n\n      this.validateSubNodes(treeNode, symbols, rules);\n      return;\n\n    /////////////////////////////\n    // Sequence of statements\n    /////////////////////////////\n    case TreeNodeType.SEQUENCE_OF_STATEMENTS:\n      if (rules.acceptSequenceOfStatements.isNo() && treeNode.subActions[0].type == TokenType.SEMICOLON) {\n        if (treeNode.subNodes.length == 1) {\n          this.errors.add(new Message(\n              'e_sem_forbidden_semicolon',\n              treeNode.subActions[0].pos\n            ));\n        } else {\n          this.errors.add(new Message(\n              'e_sem_forbidden_sequence_of_statements',\n              treeNode.subActions[0].pos\n            ));\n        }\n      }\n\n      this.validateSubNodes(treeNode, symbols, rules);\n      return;\n\n    ////////////////////////////\n    // Expression, term or power\n    ////////////////////////////\n    default:\n      this.validateSubNodes(treeNode, symbols, rules);\n    }\n  }\n\n  /**\n   * Validates sub-nodes of a given node.\n   *\n   * @param {Object} treeNode\n   *        Node to work with.\n   * @param {Symbols} symbols\n   *        Symbols being used.\n   * @param {ValidationRules} rules\n   *        Set of validation rules being used.\n   */\n  validateSubNodes(treeNode, symbols, rules) {\n    var subNode;\n    for (var i in treeNode.subNodes) {\n      if (!treeNode.subNodes.hasOwnProperty(i)) {\n        continue;\n      }\n      subNode = treeNode.subNodes[i];\n      if (!subNode.isEmpty() && !subNode.isUnparsed()) {\n        this.validateNode(subNode, symbols, rules);\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/analysis/3-semantic/validator.js\n **/","/**\n * Helper Class — to implement a functionality of aliases for functions\n */\n\nexport class Dialect {\n  /** Standard western dialect, used by default (as a non-alias) */\n  static WEST = 1;\n\n  /** Standard western dialect, used by default (as a non-alias) */\n  static WEST_LONG = 2;\n\n  /** Eastern dialect where some functions are called differently, e. g. tan as tg. */\n  static EAST = 16;\n\n  /** Greek symbols */\n  static GREEK = 32;\n\n  /** Russian variant of writing names, e.g. “син” for sine */\n  static RUS = 48;\n  /** Russian long variant of writing names, e.g. “синус” for sine */\n  static RUS_LONG = 49;\n\n  /** Notation used in some programming languages e.g. “asin” for arcsine. */\n  static PROGRAMMING = 64;\n\n  /** All other dialects */\n  static MISC = 0;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/config/dialect.js\n **/","import _ from 'underscore';\nimport removeMarkdown from 'remove-markdown';\nimport {Message} from '../analysis/message';\n\nexport class Locale {\n\n  constructor(data) {\n    this.data = data;\n  }\n  /**\n   * Returns a user-friendly message markdown with details.\n   *\n   * @param {Message} objectToLocalize\n   *      HumaneMath object to extract localized sting from\n   *\n   * @returns {string}\n   *      markdown\n   */\n  toMarkdown(objectToLocalize) {\n    if (objectToLocalize instanceof Message) {\n      let messageId = objectToLocalize.type;\n      let message = this.messages[messageId];\n      if (_.isString(message)) {\n        return message;\n      } else if (_.isFunction(message)) {\n        let params = _.extend(objectToLocalize.params || {}, objectToLocalize.pos);\n        return message(params);\n      }\n    }\n  }\n\n  /**\n   * Returns a user-friendly message text with details.\n   *\n   * @param {Message} objectToLocalize\n   *      HumaneMath object to extract localized sting from\n   *\n   * @returns {string}\n   *      unescaped text\n   */\n  toText(objectToLocalize) {\n    var markdown = this.toMarkdown(objectToLocalize);\n    return removeMarkdown(markdown);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/config/locale.js\n **/","module.exports = function(md, options) {\n  options = options || {};\n  options.stripListLeaders = options.hasOwnProperty('stripListLeaders') ? options.stripListLeaders : true;\n  options.gfm = options.hasOwnProperty('gfm') ? options.gfm : true;\n\n  var output = md;\n  try {\n    if (options.stripListLeaders) {\n      output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d\\.)\\s+/gm, '$1');\n    }\n    if (options.gfm){\n      output = output\n        // Header\n        .replace(/\\n={2,}/g, '\\n')\n        // Strikethrough\n        .replace(/~~/g, '')\n        // Fenced codeblocks\n        .replace(/`{3}.*\\n/g, '');\n    }\n    output = output\n      // Remove HTML tags\n      .replace(/<(.*?)>/g, '$1')\n      // Remove setext-style headers\n      .replace(/^[=\\-]{2,}\\s*$/g, '')\n      // Remove footnotes?\n      .replace(/\\[\\^.+?\\](\\: .*?$)?/g, '')\n      .replace(/\\s{0,2}\\[.*?\\]: .*?$/g, '')\n      // Remove images\n      .replace(/\\!\\[.*?\\][\\[\\(].*?[\\]\\)]/g, '')\n      // Remove inline links\n      .replace(/\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, '$1')\n      // Remove Blockquotes\n      .replace(/>/g, '')\n      // Remove reference-style links?\n      .replace(/^\\s{1,2}\\[(.*?)\\]: (\\S+)( \".*?\")?\\s*$/g, '')\n      // Remove atx-style headers\n      .replace(/^\\#{1,6}\\s*([^#]*)\\s*(\\#{1,6})?/gm, '$1')\n      .replace(/([\\*_]{1,3})(\\S.*?\\S)\\1/g, '$2')\n      .replace(/(`{3,})(.*?)\\1/gm, '$2')\n      .replace(/^-{3,}\\s*$/g, '')\n      .replace(/`(.+?)`/g, '$1')\n      .replace(/\\n{2,}/g, '\\n\\n');\n  } catch(e) {\n    console.error(e);\n    return md;\n  }\n  return output;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/remove-markdown/index.js\n ** module id = 22\n ** module chunks = 0\n **/","import _ from 'underscore';\n\n/**\n * Container for functions, constants and variables\n */\nexport class Symbols {\n\n  constructor() {\n    this.functionDefinitionsById = [];\n    this.constantDefinitionsById = [];\n    this.variableDefinitionsById = [];\n    this.functionIdsByAlias = {};\n    this.constantIdsByAlias = {};\n    this.variableIdsByAlias = {};\n\n    this.disableAutoIndexing();\n    this.initialize();\n    this.enableAutoIndexing();\n\n    this.indexAliases(this.functionDefinitionsById, this.functionIdsByAlias);\n    this.indexAliases(this.constantDefinitionsById, this.constantIdsByAlias);\n    this.indexAliases(this.variableDefinitionsById, this.variableIdsByAlias);\n  }\n\n  initialize() {\n  }\n\n  disableAutoIndexing() {\n    this.autoIndexingDisabled = true;\n  }\n\n  enableAutoIndexing() {\n    delete this.autoIndexingDisabled;\n  }\n\n  /**\n   * Registers a function.\n   *\n   * @private\n   *\n   * @param {Array} aliases\n   *    Alternative names for the function\n   * @param {Function} executor\n   *    Function object that executes the function.\n   * @param {number|Array} [argumentCount=1]\n   *    Can be both an integer positive number and an Array of one\n   *    or 2 numbers. If the number in an array is\n   *    single, it corresponds to minimum number of arguments, otherwise\n   *    the first one means minimum argument count, and another one —\n   *    maximum count.\n   * @param {boolean} [nonSimplifiable=false]\n   *    Defines whether a function can be a subject to\n   *    simplification. Is true for random generator functions.\n   * @param {boolean} [calculateForNaNs=false]\n   *    Set to true to avoid “lazy calculating” for the\n   *    function. Even if any of the arguments is NaN, calculations will\n   *    not be aborted (e.g. useful for “if”).\n   */\n  addFunction(aliases, executor, argumentCount = 1, nonSimplifiable = false, calculateForNaNs = false) {\n    var currentFunctionDefinition = {};\n    currentFunctionDefinition.id = this.extractIdFromAliases(aliases);\n\n    currentFunctionDefinition.aliases = aliases;\n\n    if (!_.isFunction(executor)) {\n      throw new Error(`Function ${currentFunctionDefinition.id} does not have a valid executor`);\n    }\n    currentFunctionDefinition.executor = executor;\n\n    // Add argumentCount\n    if (_.isNumber(argumentCount)) {\n      currentFunctionDefinition.argumentCount = argumentCount;\n    } else if (_.isArray(argumentCount)) {\n      currentFunctionDefinition.argumentCount = {\n        min: argumentCount[0],\n        max: argumentCount.length == 1 ? Number.POSITIVE_INFINITY : argumentCount[1]\n      };\n    }\n\n    currentFunctionDefinition.nonSimplifiable = !!nonSimplifiable;\n    currentFunctionDefinition.calculateForNaNs = !!calculateForNaNs;\n\n    this.functionDefinitionsById[currentFunctionDefinition.id] = currentFunctionDefinition;\n\n    if (!this.autoIndexingDisabled) {\n      this.indexAliases(this.functionDefinitionsById, this.functionIdsByAlias);\n    }\n  }\n\n  /**\n   * Registers a constant.\n   *\n   * @private\n   *\n   * @param {Array} aliases\n   *    Alternative names for the constant\n   * @param {number} value\n   *    Value of a constant\n   */\n  addConstant(aliases, value) {\n    var currentConstantDefinition = {};\n    currentConstantDefinition.id = this.extractIdFromAliases(aliases);\n    currentConstantDefinition.aliases = aliases;\n    currentConstantDefinition.value = value;\n\n    this.constantDefinitionsById[currentConstantDefinition.id] = currentConstantDefinition;\n\n    if (!this.autoIndexingDisabled) {\n      this.indexAliases(this.constantDefinitionsById, this.constantIdsByAlias);\n    }\n  }\n\n  /**\n   * Registers a variable.\n   *\n   * @param {Object} aliases\n   *    Alternative names for the variable.\n   */\n  addVariable(aliases) {\n    var currentVariableDefinition = [];\n    currentVariableDefinition.id = this.extractIdFromAliases(aliases);\n    currentVariableDefinition.aliases = aliases;\n\n    this.variableDefinitionsById[currentVariableDefinition.id] = currentVariableDefinition;\n\n    if (!this.autoIndexingDisabled) {\n      this.indexAliases(this.functionDefinitionsById, this.functionIdsByAlias);\n    }\n  }\n\n  /**\n   * Performs a search for a requested function.\n   *\n   * @param {string} functionName\n   *        Name of a function that need to be found.\n   *\n   * @returns {?string}\n   *          id of a function (substitutes alias with the default name)\n   *          or null if it was not found.\n   */\n  findFunction(functionName) {\n    return this.functionIdsByAlias[functionName] || null;\n  }\n\n  /**\n   * Performs a search for a requested constant.\n   *\n   * @param {string} constantName\n   *        Name of a constant that need to be found.\n   *\n   * @returns {?string}\n   *          id of a constant (substitutes alias with the default name)\n   *          or null if it was not found.\n   *\n   */\n  findConstant(constantName) {\n    return this.constantIdsByAlias[constantName] || null;\n  }\n\n  /**\n   * Performs a search for a requested variable.\n   *\n   * @param {string} variableName\n   *        Name of a variable that need to be found.\n   *\n   * @returns {?string}\n   *          id of a variable (substitutes alias with the default name)\n   *          or null if it was not found.\n   */\n  findVariable(variableName) {\n    return this.variableIdsByAlias[variableName] || false;\n  }\n\n  /**\n   * Creates a helpful index array of aliases. This helps to find a function\n   * or an constant by its alias\n   *\n   * @private\n   *\n   * @param {Object} whatToIndex\n   *    reference to a list of functions/constants.\n   * @param {Object} whereToPut\n   *    reference to a list with indexes.\n   */\n  indexAliases(whatToIndex, whereToPut) {\n    _.each(whatToIndex, (symbolDefinition, symbolId) => {\n      _.each(symbolDefinition.aliases, (alias) => {\n        whereToPut[alias] = symbolId;\n      });\n    });\n  }\n\n  /**\n   *\n   * @private\n   *\n   * @param {Object} aliases\n   *        key/value pairs\n   *\n   * @returns {string}\n   */\n  extractIdFromAliases(aliases) {\n    return _.keys(aliases)[0];\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/config/symbols.js\n **/","//import Signal from 'signals';\nimport MessageList from './analysis/message-list';\nimport TokenStream from './analysis/1-lexical/token-stream';\nimport Tree        from './analysis/2-syntactic/tree';\nimport Validator   from './analysis/3-semantic/validator';\n\n/**\n * Text is a main class used for keeping mathematical statements, expressions, etc.\n */\nexport class Text {\n  /**\n   * @param {Symbols} symbols\n   * @param {ValidationRules} validationRules\n   * @param {string} [defaultContent='']\n   */\n  construct(symbols, validationRules, defaultContent = '') {\n\n    this._tokenStream = new TokenStream();\n    this._tree = new Tree();\n    this._validator = new Validator();\n\n    this._validationRules = validationRules;\n\n    this.errors = new MessageList();\n    this.warnings = new MessageList();\n    this.hasErrors = false;\n    this.hasWarnings = false;\n\n    //this.changed = new Signal();\n\n    this.setContent(defaultContent);\n  }\n\n  /**\n   * Updates an object with new text (formula).\n   *\n   * @param {string} newContent\n   *    new mathematical expression that needs to be interpreted.\n   *\n   * @returns {boolean}\n   *     true if the formula was really changed.\n   */\n  setContent(newContent = '') {\n\n    // var time_start = new Date().getTime();\n\n    // Basic check on changes\n    if (this.content === newContent) {\n      return false;\n    }\n\n    this.content = newContent;\n\n    // Perform lexical analysis\n    if (!this._tokenStream.tokenize(newContent)) {\n      return false;\n    }\n\n    // Perform syntactic analysis\n    if (!this._tree.parse(this._tokenStream)) {\n      return false;\n    }\n\n    // Perform semantic analysis\n    this._validator.validate(\n      this._tree,\n      this._validationRules,\n      !this._tokenStream.errors.isEmpty() || !this._tree.errors.isEmpty()\n    );\n\n    // Collect errors\n    this.errors = (new MessageList(this._tokenStream.errors,\n        this._tree.errors, this._validator.errors)).sort();\n\n    //this.changed.dispatch();\n\n    // Return true as the text was changed\n    return true;\n  }\n\n  /**\n   * Re-validates the math object according to new validation rule set.\n   *\n   * @param {Object} validationRules\n   *\n   * @returns {boolean} True if anything was changed.\n   */\n  setValidationRules(validationRules) {\n    if (this._validationRules == validationRules) {\n      return false;\n    }\n\n    this._validationRules = validationRules;\n\n    // Perform semantic analysis\n    if (!this._validator.validate(this._tree, this._validationRules)) {\n      return false;\n    }\n\n    // Collect errors\n    this.errors = (new MessageList(\n        this._tokenStream.errors,\n        this._tree.errors,\n        this._validator.errors\n      )).sort();\n\n    //this.changed.dispatch();\n    return true;\n  }\n  //XXX remove or restore\n  // dump() {\n  //   return `text: \"${this.content}\", errors: ${this.errors.count()} (${this._tokenStream.errors.count()}, ${this._tree.errors.count()}, ${this._validator.errors.count()})`;\n  // //    + ' Warnings: ' + this.warnings.count()\n  // //        + '(' + this._tokenStream.warnings.count() + ', '\n  // //            + this._tree.warnings.count()    + ', '\n  // //            + this._validator.warnings.count()   + ')'\n  //     ;\n  // }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/text.js\n **/","import _ from 'underscore';\n\nimport TokenType    from './analysis/1-lexical/token-type';\nimport TreeNodeType from './analysis/2-syntactic/tree-node-type';\nimport Text         from './text';\n\n/**\n * Calculator can be used for extracting node values.\n * It is also helpful to precompute values for some nodes\n * a tree in order to make further calculations faster. The calculator\n * does not simplify a tree or make any other changes to it except\n * for adding or removing “value” property to nodes.\n * Calculator is a Visitor.\n */\nexport class Calculator {\n\n  /**\n   * This inner use exception is to be thrown anytime a calculation of sub-nodes\n   * fails. It is caught by a caller function and NaN is returned. Such approach\n   * is made to increase the speed of the calculator and avoid performing useless\n   * computations.\n   */\n  static COULD_NOT_CALCULATE_EXCEPTION = 13;\n\n  /**\n   * Recursively calculates values for all nodes starting at “treeNode” where it\n   * is possible and stores the result at node.value. This can be useful for\n   * increasing the speed of further calculations.\n   *\n   * @param {MathTreeNode} expressionNode\n   *    A MathTreeNode to be calculated. Can be any type of node.\n   *\n   * @param {Object} variables\n   *    Variables passed.\n   *\n   * @param {Object} userSymbols\n   *    Set of user constants and functions. Not in use now.\n   *\n   * @returns {number}\n   *     Value of the expression or NaN if calculation failed.\n   */\n  calculateExpression(expressionNode, variables, userSymbols) {\n    if (expressionNode instanceof Text) {\n      expressionNode = expressionNode.tree.root;\n    }\n\n    if (!variables) {\n      variables = {};\n    }\n\n    var result = Number.NaN;\n    try {\n      result = this.calculateValueOfTheNode(expressionNode, variables, userSymbols);\n    } catch (e) {\n      if (e != this.COULD_NOT_CALCULATE_EXCEPTION) {\n        throw e;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks whether the given inequality is true. (Not implemented yet)\n   * TODO implement\n   *\n   * @param {Object}\n   *    inequalityNode\n   * @param {Object}\n   *    variables\n   * @param {Object}\n   *    userSymbols\n   */\n  //checkInequality(inequalityNode, variables, userSymbols) {\n  //}\n\n  /**\n   * Recursively calculates values for all nodes starting at “treeNode” where it\n   * is possible and stores the result at node.value. This can be useful for\n   * increasing the speed of further calculations.\n   *\n   * @param {MathTreeNode} treeNode\n   *    A MathTreeNode to be calculated. Can be any type of node.\n   * @param {Object} variables\n   *    Variables passed.\n   * @param {Object} userSymbols\n   *    Set of user constants and functions. Not in use now.\n   */\n  calculateCachedValues(treeNode, variables, userSymbols) {\n    if (treeNode instanceof Text) {\n      treeNode = treeNode.tree.root;\n    }\n\n    if (!variables) {\n      variables = {};\n    }\n\n    try {\n      this.calculateValueOfTheNode(treeNode, variables, userSymbols, true);\n    } catch (e) {\n      if (e != this.COULD_NOT_CALCULATE_EXCEPTION) {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * Removes all cashed values of the nodes. For instance, if a node contained\n   * (pi-3) and its value was equal to 0.14, its value becomes undefined.\n   *\n   * @param {Object} treeNode\n   *    Node to clear values in\n   */\n  clearCachedValues(treeNode) {\n    if (treeNode instanceof Text) {\n      treeNode = treeNode.tree.root;\n    }\n\n    // Recursively clear child nodes.\n    if (treeNode.subNodes) {\n      for (let i = treeNode.subNodes.length - 1; i >= 0; i--) {\n        this.clearCachedValues(treeNode.subNodes[i]);\n      }\n    }\n\n    // Delete a value of the current node in case it is not a number.\n    if (treeNode.type != TreeNodeType.NUMBER) {\n      delete treeNode.value;\n    }\n  }\n\n  /**\n   * Calculates the value of a node and depending on the mode returns it or saves\n   * as the node “value” property.\n   *\n   * @param {MathTreeNode} treeNode\n   *    A MathTreeNode to be calculated. Can be any type of node.\n   * @param {Object} variables\n   *    Variables passed.\n   * @param {Object} symbols\n   *    Set of constants and functions.\n   * @param {boolean} calculateCacheMode\n   *    If true, the result of the function will be saved as the node “value” property.\n   * @returns {number|NaN}\n   *      xxx\n   */\n  calculateValueOfTheNode(treeNode, variables, symbols, calculateCacheMode) {\n\n    //FIXME revise\n    //// Do nothing if the value is already calculated or this node is a number (it has already got a value).\n    // if ((treeNode.value !== null && !calculateCacheMode) || treeNode.type == TreeNodeType.NUMBER)\n\n    // Do nothing if a value is already known, just return it.\n    if (treeNode.value !== undefined) {\n      return treeNode.value;\n    }\n\n    // The result is meaningless by default.\n    var result = null;\n\n    // All values of sub-nodes must be kept in a separate array to be then passed\n    // to an executor function or processed.\n    var subNodesValues = new Array();\n\n    // Detects if the function must return NaN if any of sub-nodes contains NaN.\n    var failOnSubNodeNaN = true;\n\n    // If is a special case. No need to return NaN if any of the arguments is NaN.\n    if (treeNode.type == TreeNodeType.FUNCTION\n        && symbols.functions[treeNode.id]\n        && symbols.functions[treeNode.id].calculateForNaNs) {\n      failOnSubNodeNaN = false;\n    }\n\n    // Calculate values for all children sub-nodes if there are any.\n    if (treeNode.subNodes) {\n      for (let i = treeNode.subNodes.length - 1; i >= 0; i--) {\n        // Try to get the value of a sub-node and saving it.\n        if (treeNode.subNodes[i].value === undefined) {\n          // If failOnSubNodeNaN is false, calculations are made in\n          // try/catch block to avoid lazy finish in case of a NaN.\n          if (!failOnSubNodeNaN) {\n            try {\n              subNodesValues[i] = this.calculateValueOfTheNode(\n                  treeNode.subNodes[i], variables,\n                  symbols, calculateCacheMode\n                );\n            } catch (e) {\n              if (e != this.COULD_NOT_CALCULATE_EXCEPTION) {\n                throw e;\n              }\n            }\n          } else {\n            subNodesValues[i] = this.calculateValueOfTheNode(\n                treeNode.subNodes[i], variables, symbols,\n                calculateCacheMode);\n          }\n        } else {\n          subNodesValues[i] = treeNode.subNodes[i].value;\n        }\n\n        // If any of sub-nodes has a non-numeric value and failOnSubNodeNaN\n        // is not false, return.\n        if (failOnSubNodeNaN\n            && (subNodesValues[i] === undefined || subNodesValues[i] === null)) {\n          return NaN;\n        }\n      }\n    }\n\n    // If the function cannot be simplified and now in calculate cache mode, return.\n    if (calculateCacheMode\n        && treeNode.type == TreeNodeType.FUNCTION\n        && typeof (symbols.functions[treeNode.id]) != 'undefined'\n        && symbols.functions[treeNode.id].nonSimplifiable) {\n      return NaN;\n    }\n\n    var subNodesValuesCount = subNodesValues.length;\n\n    /////////////////////////////////////\n    // Calculate a value of the current node depending on its type.\n    /////////////////////////////////////\n\n    switch (treeNode.type) {\n\n    /////////////////////////////////////\n    // Node is a symbol\n    case TreeNodeType.SYMBOL:\n      // A symbol is a standard constant.\n      if (treeNode.subType == TreeNodeType.STANDARD_CONSTANT) {\n        if (typeof (symbols.constants[treeNode.id]) == 'undefined') {\n          return NaN;\n        }\n        result = symbols.constants[treeNode.id].value;\n        break;\n      }\n\n      // A symbol is a variable passed to the calculator.\n      if (variables[treeNode.id] !== undefined) {\n        result = variables[treeNode.id];\n        break;\n      }\n      //FIXME check this\n      break;\n\n    /////////////////////////////////////\n    // Node is a function\n    case TreeNodeType.FUNCTION:\n\n      // A function is standard.\n      if (treeNode.subType == TreeNodeType.STANDARD_FUNCTION) {\n        if (typeof (symbols.functions[treeNode.id]) != undefined) {\n          return NaN;\n        }\n        result = symbols.functions[treeNode.id].executor(subNodesValues);\n        break;\n      }\n      break;\n\n    /////////////////////////////////////\n    // Node is an expression\n    case TreeNodeType.EXPRESSION:\n      result = subNodesValues[0];\n      for (let i = 1; i < subNodesValuesCount; i++) {\n        if (treeNode.subActions[i - 1].type == TokenType.ADD) {\n          result += subNodesValues[i];\n        } else {\n          result -= subNodesValues[i];\n        }\n      }\n      break;\n\n    /////////////////////////////////////\n    // Node is a term\n    case TreeNodeType.TERM:\n      result = subNodesValues[0];\n      for (let i = 1; i < subNodesValuesCount; i++) {\n        if (treeNode.subActions[i - 1].type == TokenType.MULTIPLY) {\n          result *= subNodesValues[i];\n        } else {\n          result /= subNodesValues[i];\n        }\n      }\n      break;\n\n    /////////////////////////////////////\n    // Node is a power\n    case TreeNodeType.POWER:\n      result = subNodesValues[0];\n      for (let i = 1; i < subNodesValuesCount; i++) {\n        result = Math.pow(result, subNodesValues[i]);\n      }\n      break;\n    }\n\n    // Do something with an obtained result\n\n    if (isNaN(result) && !calculateCacheMode) {\n      throw this.COULD_NOT_CALCULATE_EXCEPTION;\n    }\n\n    // Saving node result if it we are in a “calculate cache” mode\n    if (calculateCacheMode && (_.isNumber(result) && !isNaN(result))) {\n      treeNode.value = result;\n    }\n    return result;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/calculator.js\n **/","import {HumaneMath} from '../core/core';\n\nHumaneMath.validationRules.ABSTRACT_FUNCTION = (new HumaneMath.ValidationRules())\n  .setRule('allowFunctions', HumaneMath.ValidationRule.YES)\n  .setRule('allowConstants', HumaneMath.ValidationRule.YES)\n  .setRule('acceptMathOperations', HumaneMath.ValidationRule.YES);\n//  .setRule('allowConstants', HumaneMath.ValidationRule.ONLY, ['e'])\n//  .setRule('allowConstants', HumaneMath.ValidationRule.EXCLUDING, ['pi'])\n\n// Functions\n// -- f(x)\nHumaneMath.validationRules.FUNCTION_Y_X = HumaneMath.validationRules.ABSTRACT_FUNCTION\n    .clone()\n    .setRule('allowVariables', HumaneMath.ValidationRule.ONLY, ['x']);\n\n// -- f(y)\nHumaneMath.validationRules.FUNCTION_X_Y = HumaneMath.validationRules.ABSTRACT_FUNCTION\n    .clone()\n    .setRule('allowVariables', HumaneMath.ValidationRule.ONLY, ['y']);\n\n// -- f(t)\nHumaneMath.validationRules.FUNCTION_X_T = HumaneMath.validationRules.ABSTRACT_FUNCTION\n    .clone()\n    .setRule('allowVariables', HumaneMath.ValidationRule.ONLY, ['t']);\n\nHumaneMath.validationRules.FUNCTION_Y_T = HumaneMath.validationRules.FUNCTION_X_T;\n\n// -- f(a)\nHumaneMath.validationRules.FUNCTION_R_A = HumaneMath.validationRules.ABSTRACT_FUNCTION\n    .clone()\n    .setRule('allowVariables', HumaneMath.ValidationRule.ONLY, ['a']);\n\n// Arguments\n// -- range\nHumaneMath.validationRules.ARG_RANGE = (new HumaneMath.ValidationRules())\n    .setRule('valueOnlyFinite', HumaneMath.ValidationRule.YES)\n    .setRule('allowConstants', HumaneMath.ValidationRule.YES);\n\n// -- steps\nHumaneMath.validationRules.ARG_STEPS = (new HumaneMath.ValidationRules())\n    .setRule('valueOnlyFinite', HumaneMath.ValidationRule.YES)\n    .setRule('valueOnlyInteger', HumaneMath.ValidationRule.YES)\n    .setRule('valueRange', HumaneMath.ValidationRule.ONLY, {\n      min: 2,\n      max: 100000\n    });\n\n// Canvas bound\nHumaneMath.validationRules.CANVAS_BOUNDS = (new HumaneMath.ValidationRules())\n    .setRule('valueOnlyFinite', HumaneMath.ValidationRule.YES)\n    .setRule('allowConstants', HumaneMath.ValidationRule.YES)\n    .setRule('valueRange', HumaneMath.ValidationRule.ONLY, {\n      min: -1000,\n      max: 1000\n    });\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/extra/standard-validation-rules.js\n **/","import {HumaneMath} from '../core/core';\n\n/* eslint-disable indent, spellcheck/spell-checker */\n/* See http://github.com/eslint/eslint/issues/4696 */\n\n/**\n * The class is a standard source for properties of all standard functions,\n * constants and variables.\n */\n\nclass StandardSymbols extends HumaneMath.Symbols {\n\n  construct() {\n    this.addTrigonometricFunctions();\n    this.addInverseTrigonometricFunctions();\n    this.addHyperbolicTrigonometricFunctions();\n    this.addInverseHyperbolicTrigonometricFunctions();\n\n    this.addRoundingFunctions();\n    this.addInvolutionFunctions();\n    this.addMiscFunctions();\n    this.addNonMathFunctions();\n\n    this.addConstants();\n    this.addVariables();\n\n    this.addEasterEggs();\n  }\n\n  addTrigonometricFunctions() {\n\n    // Sine\n    this.addFunction({\n        'sin':   HumaneMath.Dialect.WEST,\n        'sine':  HumaneMath.Dialect.WEST_LONG,\n        'син':   HumaneMath.Dialect.RUS,\n        'синус': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => Math.sin(params[0])\n    );\n\n    // Cosine\n    this.addFunction({\n        'cos':     HumaneMath.Dialect.WEST,\n        'cosine':  HumaneMath.Dialect.WEST_LONG,\n        'кос':     HumaneMath.Dialect.RUS,\n        'косинус': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => Math.cos(params[0])\n    );\n\n    // Tangent\n    this.addFunction({\n        'tan':     HumaneMath.Dialect.WEST,\n        'tangent': HumaneMath.Dialect.WEST_LONG,\n        'tg':      HumaneMath.Dialect.EAST,\n        'тан':     HumaneMath.Dialect.RUS,\n        'тангенс': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => Math.tan(params[0])\n    );\n\n    // Cotangent\n    this.addFunction({\n        'cot':       HumaneMath.Dialect.WEST,\n        'cotangent': HumaneMath.Dialect.WEST_LONG,\n        'ctg':       HumaneMath.Dialect.EAST,\n        'ctn':       HumaneMath.Dialect.EAST,\n        'котан':     HumaneMath.Dialect.RUS,\n        'котангенс': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => 1.0 / Math.tan(params[0])\n    );\n\n    // Secant\n    this.addFunction({\n        'sec':    HumaneMath.Dialect.WEST,\n        'secant': HumaneMath.Dialect.WEST_LONG,\n        'сек':    HumaneMath.Dialect.RUS,\n        'секанс': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => 1.0 / Math.cos(params[0])\n    );\n\n    // Cosecant\n    this.addFunction({\n        'csc':      HumaneMath.Dialect.WEST,\n        'cosecant': HumaneMath.Dialect.WEST_LONG,\n        'cosec':    HumaneMath.Dialect.EAST,\n        'косек':    HumaneMath.Dialect.RUS,\n        'косеканс': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => 1.0 / Math.sin(params[0])\n    );\n  }\n\n  addInverseTrigonometricFunctions() {\n\n    // Arcsine\n    this.addFunction({\n        'arcsin':   HumaneMath.Dialect.WEST,\n        'arcsine':  HumaneMath.Dialect.WEST_LONG,\n        'asin':     HumaneMath.Dialect.PROGRAMMING,\n        'арксин':   HumaneMath.Dialect.RUS,\n        'арксинус': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => Math.asin(params[0])\n    );\n\n    // Arccosine\n    this.addFunction({\n        'arccos':     HumaneMath.Dialect.WEST,\n        'arccosine':  HumaneMath.Dialect.WEST_LONG,\n        'acos':       HumaneMath.Dialect.PROGRAMMING,\n        'арккос':     HumaneMath.Dialect.RUS,\n        'арккосинус': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => Math.acos(params[0])\n    );\n\n    // Arctangent\n    this.addFunction({\n        'arctan':     HumaneMath.Dialect.WEST,\n        'arctangent': HumaneMath.Dialect.WEST_LONG,\n        'arctg':      HumaneMath.Dialect.EAST,\n        'atan':       HumaneMath.Dialect.PROGRAMMING,\n        'арктан':     HumaneMath.Dialect.RUS,\n        'арктангенс': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => Math.atan(params[0])\n    );\n\n    // Arccotangent\n    this.addFunction({\n        'arccot':       HumaneMath.Dialect.WEST,\n        'arccotangent': HumaneMath.Dialect.WEST_LONG,\n        'arcctg':       HumaneMath.Dialect.EAST,\n        'acot':         HumaneMath.Dialect.PROGRAMMING,\n        'арккотан':     HumaneMath.Dialect.RUS,\n        'арккотангенс': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => (params[0] < 0 ? Math.PI : 0) + Math.atan(1 / params[0])\n    );\n\n    // Arcsecant\n    this.addFunction({\n        'arcsec':    HumaneMath.Dialect.WEST,\n        'arcsecant': HumaneMath.Dialect.WEST_LONG,\n        'asec':      HumaneMath.Dialect.PROGRAMMING,\n        'арксек':    HumaneMath.Dialect.RUS,\n        'арксеканс': HumaneMath.Dialect.RUS_LONG\n\n      },\n      (params) => Math.acos(1 / params[0])\n    );\n\n    // Arccosecant\n    this.addFunction({\n        'arccsc':      HumaneMath.Dialect.WEST,\n        'arcsecant':   HumaneMath.Dialect.WEST_LONG,\n        'arccosec':    HumaneMath.Dialect.EAST,\n        'acosec':      HumaneMath.Dialect.PROGRAMMING,\n        'арксек':      HumaneMath.Dialect.RUS,\n        'арккосеканс': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => Math.asin(1 / params[0])\n    );\n  }\n\n  addHyperbolicTrigonometricFunctions() {\n\n    // Hyperbolic sine\n    this.addFunction({\n        'sinh': HumaneMath.Dialect.WEST,\n        'sh':   HumaneMath.Dialect.EAST\n      },\n      (params) => (Math.exp(params[0]) - Math.exp(-params[0])) / 2.0\n    );\n\n    // Hyperbolic cosine\n    this.addFunction({\n        'cosh': HumaneMath.Dialect.WEST,\n        'ch':   HumaneMath.Dialect.EAST\n      },\n      (params) => (Math.exp(params[0]) + Math.exp(-params[0])) / 2.0\n    );\n\n    // Hyperbolic tangent\n    this.addFunction({\n        'tanh': HumaneMath.Dialect.WEST,\n        'th':   HumaneMath.Dialect.EAST\n      },\n      (params) => (Math.exp(2 * params[0]) - 1.0) / (Math.exp(2 * params[0]) + 1.0)\n    );\n\n    // Hyperbolic cotangent\n    this.addFunction({\n        'coth': HumaneMath.Dialect.WEST,\n        'сth':  HumaneMath.Dialect.EAST\n      },\n      (params) => (Math.exp(2 * params[0]) + 1.0) / (Math.exp(2 * params[0]) - 1.0)\n    );\n\n    // Hyperbolic secant\n    this.addFunction({\n        'sech': HumaneMath.Dialect.WEST\n      },\n      (params) => 2.0 / (Math.exp(params[0]) + Math.exp(-params[0]))\n    );\n\n    // Hyperbolic cosecant\n    this.addFunction({\n        'csch':   HumaneMath.Dialect.WEST,\n        'cosech': HumaneMath.Dialect.EAST\n      },\n      (params) => 2.0 / (Math.exp(params[0]) - Math.exp(-params[0]))\n    );\n  }\n\n  addInverseHyperbolicTrigonometricFunctions() {\n    // Hyperbolic arcsine\n    this.addFunction({\n        'arcsinh': HumaneMath.Dialect.WEST,\n        'arsh':    HumaneMath.Dialect.EAST\n      },\n      (params) => Math.log(params[0] + Math.sqrt(params[0] * params[0] + 1))\n    );\n\n    // Hyperbolic arccosine\n    this.addFunction({\n        'arccosh': HumaneMath.Dialect.WEST,\n        'arch':    HumaneMath.Dialect.EAST\n      },\n      (params) => params[0] >= 1 ? (Math.log(params[0] + Math.sqrt(params[0] * params[0] - 1))) : NaN\n    );\n\n    // Hyperbolic arctangent\n    this.addFunction({\n        'arctanh': HumaneMath.Dialect.WEST,\n        'arth':    HumaneMath.Dialect.EAST\n      },\n      (params) => (params[0] < 1 && params[0] > -1)\n              ? (Math.log((1 + params[0]) / (1 - params[0])) / 2)\n              : NaN\n    );\n\n    // Hyperbolic arccotangent\n    this.addFunction({\n        'arccoth': HumaneMath.Dialect.WEST,\n        'arcth':   HumaneMath.Dialect.EAST\n      },\n      (params) => (params[0] > 1 || params[0] < -1)\n              ? (Math.log((params[0] + 1) / (params[0]) - 1) / 2)\n              : NaN\n    );\n\n    // Hyperbolic arcsecant\n    this.addFunction({\n        'arcsech': HumaneMath.Dialect.WEST,\n        'arsch':   HumaneMath.Dialect.EAST\n      },\n      (params) => (params[0] > 0 && params[0] <= 1)\n              ? Math.log((1 + Math.sqrt(1 - params[0] * params[0])) / params[0])\n              : NaN\n    );\n\n    // Hyperbolic arccosecant\n    this.addFunction({\n        'arccsch': HumaneMath.Dialect.WEST,\n        'arcsch':  HumaneMath.Dialect.EAST\n      },\n      (params) => Math.log(1 / params[0] + Math.sqrt(params[0] * params[0] + 1) / Math.abs(params[0]))\n    );\n  }\n\n  addRoundingFunctions() {\n\n    this.addFunction({\n        'round': HumaneMath.Dialect.WEST\n      },\n      (params) => Math.round(params[0])\n    );\n\n    this.addFunction({\n        'floor': HumaneMath.Dialect.WEST\n      },\n      (params) => Math.floor(params[0])\n    );\n\n    this.addFunction({\n        'ceil':    HumaneMath.Dialect.WEST,\n        'ceiling': HumaneMath.Dialect.WEST_LONG\n      },\n      (params) => Math.ceil(params[0])\n    );\n\n    this.addFunction({\n        'frac':       HumaneMath.Dialect.WEST,\n        'fractional': HumaneMath.Dialect.WEST_LONG,\n        'fract':      HumaneMath.Dialect.MISC\n      },\n      (params) => params[0] - Math.floor(params[0])\n    );\n  }\n\n  addInvolutionFunctions() {\n\n    // Power\n    this.addFunction({\n        'pow':     HumaneMath.Dialect.WEST,\n        'power':   HumaneMath.Dialect.WEST_LONG,\n        'степень': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => Math.pow(params[0], params[1]),\n      2\n    );\n\n    // Argument to the power 2\n    this.addFunction({\n        'sqr':     HumaneMath.Dialect.WEST,\n        'квадрат': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => Math.pow(params[0], 2)\n    );\n\n    // Square root\n    this.addFunction({\n        'sqrt': HumaneMath.Dialect.WEST,\n        'кк':   HumaneMath.Dialect.RUS\n      },\n      (params) => Math.sqrt(params[0])\n    );\n\n    // Cubic root\n    this.addFunction({\n        'cbrt': HumaneMath.Dialect.WEST\n        /*'кубкорень': HumaneMath.Dialect.RUS_LONG*/\n      },\n      (params) => params[0] >= 0\n              ? Math.pow(params[0], 1 / 3)\n              : -Math.pow(-params[0], 1 / 3)\n    );\n\n    // Root\n    this.addFunction({\n        'root':   HumaneMath.Dialect.WEST,\n        'корень': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => {\n        if (Math.floor(params[0]) != params[0] || params[0] < 1) {\n          return NaN;\n        }\n        return params[1] >= 0\n          ? Math.pow(params[1], 1 / params[0])\n          : (Math.floor(params[0] / 2) == params[0] / 2\n            ? NaN\n            : -Math.pow(-params[1], 1 / params[0]));\n      }\n    );\n\n    // E power argument\n    this.addFunction({\n        'exp': HumaneMath.Dialect.WEST\n      },\n      (params) => Math.exp(params)\n    );\n\n    // Logarithm\n    this.addFunction({\n        'log':      HumaneMath.Dialect.WEST,\n        'лог':      HumaneMath.Dialect.RUS,\n        'логарифм': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => Math.log(params[1]) / Math.log(params[0]),\n      2\n    );\n\n    // Natural logarithm\n    this.addFunction({\n        'ln': HumaneMath.Dialect.WEST\n      },\n      (params) => Math.log(params[0])\n    );\n\n    // Common logarithm\n    this.addFunction({\n        'lg': HumaneMath.Dialect.WEST\n      },\n      (params) => Math.log(params[0]) / Math.LN10\n    );\n  }\n\n  addMiscFunctions() {\n    // Abs\n    this.addFunction({\n        'abs':     HumaneMath.Dialect.WEST,\n        'modulus': HumaneMath.Dialect.MISC,\n        'модуль':  HumaneMath.Dialect.RUS_LONG\n      },\n        (params) => Math.abs(params[0])\n    );\n\n    // Random number from 0 to 1. Calculated every time (no caching)\n    this.addFunction({\n        'random': HumaneMath.Dialect.WEST\n      },\n      () => Math.random(),\n      0,\n      true\n    );\n\n    // Random number from 0 to 1. Calculated once\n    this.addFunction({\n        'random2': HumaneMath.Dialect.WEST\n      },\n      () => Math.random(),\n      0\n    );\n\n    // Sign of the argument\n    this.addFunction({\n        'sgn':  HumaneMath.Dialect.WEST,\n        'sign': HumaneMath.Dialect.WEST_LONG\n      },\n      (params) => {\n        if (isNaN(params[0])) {\n          return NaN;\n        }\n        return params[0] == 0\n            ? 0\n            : (params[0] > 0 ? 1 : -1);\n      }\n    );\n  }\n\n  addNonMathFunctions() {\n\n    // Maximum value\n    this.addFunction({\n        'max':      HumaneMath.Dialect.WEST,\n        'maximum':  HumaneMath.Dialect.WEST_LONG,\n        'макс':     HumaneMath.Dialect.RUS,\n        'максимум': HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => {\n        var result = params[0];\n        for (var i = 1; i < params.length; i++) {\n          result = Math.max(result, params[i]);\n        }\n        return result;\n      },\n      [2]\n    );\n\n    // Minimum value\n    this.addFunction({\n        'min': HumaneMath.Dialect.WEST,\n        'minimum':  HumaneMath.Dialect.WEST_LONG,\n        'мин':  HumaneMath.Dialect.RUS,\n        'минимум':  HumaneMath.Dialect.RUS_LONG\n      },\n      (params) => {\n        var result = params[0];\n        for (var i = 1; i < params.length; i++) {\n          result = Math.min(result, params[i]);\n        }\n        return result;\n      },\n      [2]\n    );\n\n    // Condition\n    this.addFunction({\n        'if': HumaneMath.Dialect.WEST,\n        'если':  HumaneMath.Dialect.RUS\n      },\n      (params) => {\n        return params[0] > 0\n          ? params[1]\n          : params[2];\n      },\n      [2],\n      false,\n      true\n    );\n  }\n\n  addConstants() {\n\n    // Constant equal to a circle's circumference divided by its diameter\n    this.addConstant({\n      'pi':  HumaneMath.Dialect.WEST,\n      'π':   HumaneMath.Dialect.GREEK,\n      'пи':  HumaneMath.Dialect.RUS\n    }, Math.PI);\n\n    // Euler's number\n    this.addConstant({\n      'e':  HumaneMath.Dialect.WEST,\n      'е':  HumaneMath.Dialect.RUS\n    }, Math.E);\n\n    // The golden ratio\n    this.addConstant({\n      'phi': HumaneMath.Dialect.WEST,\n      'ph':  HumaneMath.Dialect.MISC,\n      'φ':   HumaneMath.Dialect.GREEK,\n      'фи':  HumaneMath.Dialect.RUS\n    }, 1.6180339887);\n  }\n\n  /**\n   * Loads standard variables Variables are implemented just for keeping aliases\n   */\n  addVariables() {\n\n    this.addVariable('x', {\n      'х': HumaneMath.Dialect.RUS\n    });\n\n    this.addVariable('y', {\n      'у': HumaneMath.Dialect.RUS\n    });\n\n    this.addVariable('t', {});\n\n    this.addVariable('a', {\n      'а': HumaneMath.Dialect.RUS\n    });\n  }\n\n  addEasterEggs() {\n    // Easter eggs\n\n    // 42 — See\n    // http://en.wikipedia.org/wiki/Answer_to_the_Ultimate_Question_of_Life,_the_Universe,_and_Everything\n    this.addConstant({\n        'answer_to_the_ultimate_question_of_life_the_universe_and_everything': HumaneMath.Dialect.WEST,\n        'ответ_на_главный_вопрос_жизни_вселенной_и_всего_такого':              HumaneMath.Dialect.RUS\n      },\n      42);\n  }\n}\n\nHumaneMath.StandardSymbols = StandardSymbols;\nHumaneMath.symbols.STANDARD = new StandardSymbols();\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/extra/standard-symbols.js\n **/","import {HumaneMath} from '../core/core';\n\nHumaneMath.addLocale('en', {\n  tokenNames: {\n    [HumaneMath.TokenType.RB_LEFT   ]: 'a left bracket',\n    [HumaneMath.TokenType.RB_RIGHT  ]: 'a right bracket',\n    [HumaneMath.TokenType.COMMA     ]: 'a comma',\n    [HumaneMath.TokenType.EQUAL     ]: 'an equality sign',\n    [HumaneMath.TokenType.LESS      ]: 'a “less than” sign',\n    [HumaneMath.TokenType.MORE      ]: 'a “more than” sign',\n    [HumaneMath.TokenType.LESS_EQUAL]: 'a “less than or equal” sign',\n    [HumaneMath.TokenType.MORE_EQUAL]: 'a “more than or equal” sign',\n    [HumaneMath.TokenType.ADD       ]: 'an addition sign',\n    [HumaneMath.TokenType.SUBTRACT  ]: 'a subtraction sign',\n    [HumaneMath.TokenType.MULTIPLY  ]: 'a multiplication sign',\n    [HumaneMath.TokenType.DIVIDE    ]: 'a division sign',\n    [HumaneMath.TokenType.POWER     ]: 'an exponentiation sign',\n    [HumaneMath.TokenType.NUMBER    ]: 'a number',\n    [HumaneMath.TokenType.SYMBOL    ]: 'a name of a variable or a function',\n    [HumaneMath.TokenType.SEMICOLON ]: 'a semicolon'\n  },\n  messages: {\n\n    //################################\n    // Lexical errors\n\n    // A token is passed to some errors\n    ['e_lex_' + HumaneMath.TokenType.E_UNKNOWN           ]: (token) => `You cannot use symbol __${token.raw}__ in formulas.`,\n    ['e_lex_' + HumaneMath.TokenType.E_NUMBER_MALFORMED  ]: 'Malformed number. A number can contain only one dot and the dot must be surrounded with digits, e.g. _“3.14”_.',\n    ['e_lex_' + HumaneMath.TokenType.E_NUMBER_EXPONENTIAL]: 'It is not allowed to use an exponential form for numbers. Please, reformat it.',\n    ['e_lex_' + HumaneMath.TokenType.E_VERTICAL_SLASH    ]: 'It is not allowed to use vertical slash in formulas. To calculate absolute values, please use function _abs(argument)_.',\n    ['e_lex_' + HumaneMath.TokenType.E_STARSTAR          ]: 'It is not allowed to use __“**”__. To exponentiate a number, use _caret sign (“^”)_ or function _power(base, exponent)_.',\n    ['e_lex_' + HumaneMath.TokenType.E_EQUALEQUAL        ]: 'It is not allowed to use __“==”__. Use a _single_ equality sign for comparison and assignments.',\n    ['e_lex_' + HumaneMath.TokenType.E_MISPLACED_DOT     ]: 'The dot can be used only to separate digits in real numbers. For multiplication use _star sign (“*”)_.',\n    ['e_lex_' + HumaneMath.TokenType.E_SB_LEFT           ]: 'Square brackets can not be used. Use a left round bracket instead.',\n    ['e_lex_' + HumaneMath.TokenType.E_SB_RIGHT          ]: 'Square brackets can not be used. Use a right round bracket instead.',\n    ['e_lex_' + HumaneMath.TokenType.E_CB_LEFT           ]: 'Curly brackets can not be used. Use a left round bracket instead.',\n    ['e_lex_' + HumaneMath.TokenType.E_CB_RIGHT          ]: 'Curly brackets can not be used. Use a right round bracket instead.',\n    ['e_lex_' + HumaneMath.TokenType.E_AB_LEFT           ]: 'Angle brackets can not be used. Use a left round bracket instead.',\n    ['e_lex_' + HumaneMath.TokenType.E_AB_RIGHT          ]: 'Angle brackets can not be used. Use a right round bracket instead.',\n    ['e_lex_' + HumaneMath.TokenType.E_BACK_SLASH        ]: 'Use of backslash is not allowed. To divide use _forward slash (“/”)_.',\n    ['e_lex_' + HumaneMath.TokenType.E_REST              ]: 'The input string is too long and it can’t be read completely.',\n\n    //################################\n    // Syntax errors\n\n    // Variables passed to some errors (fields of params):\n    //     currentToken\n    //      .type\n    //      .raw\n    //    previousToken\n\n    ['e_syn_unknown'                       ]: 'Unknown syntax error detected.',\n\n    ['e_syn_function_argument_empty'       ]: 'Function argument must not be empty.',\n    ['e_syn_function_argument_wrong_symbol']: (params) => `It is not allowed to use ${this.tokenNames[params.currentToken.type]} in a function argument.`,\n    ['e_syn_function_argument_semicolon'   ]: 'It is not allowed to use a semicolon to separate function arguments. Use a comma instead.',\n\n    ['e_syn_missing_rb'                    ]: 'Missing right bracket.',\n    ['e_syn_missing_multiply'              ]: (params) => `It is not allowed to write ${this.tokenNames[params.currentToken.type]} right after ${this.tokenNames[params.previousToken.type]} Multiplication sign or any other mathematical operation is probably missing.`,\n    ['e_syn_missing_operand'               ]: (params) => `An operand (number, constant, function, etc.) is missing between ${params.previousToken.raw} and ${params.currentToken.raw}”.`,\n    ['e_syn_missing_operand_at_begin'      ]: (params) => `An operand must go before ${this.tokenNames[params.currentToken.type]}.`,\n    ['e_syn_missing_operand_at_end'        ]: (params) => `Mathematical operator (${this.tokenNames[params.currentToken.type]}) must be followed by an operand (number, constant, function, etc.).`,\n    ['e_syn_extra_rb'                      ]: 'An extra right bracket found.',\n\n    ['e_syn_brackets_empty'                ]: 'Empty brackets are allowed only for function calls with no arguments.',\n    ['e_syn_brackets_wrong_symbol'         ]: (params) => `It is not allowed to use ${this.tokenNames[params.currentToken.type]} inside of an expression in brackets.`,\n\n    ['e_syn_statements_wrong_symbol'       ]: (params) => `It is not allowed to use ${this.tokenNames[params.currentToken.type]} here.`,\n    ['e_syn_statements_comma'              ]: 'It is not allowed to use a comma here as it is acceptable only in function arguments. To separate statements use semicolons.',\n\n    ['e_syn_statement_empty_left'          ]: (params) => `An expression expected before ${this.tokenNames[params.currentToken.type]}.`,\n    ['e_syn_statement_empty_right'         ]: (params) => `An expression expected after ${this.tokenNames[params.currentToken.type]}.`,\n    ['e_syn_statement_extra_statement_sign']: (params) => `It is not allowed to use ${this.tokenNames[params.currentToken.type]} here. A statement has already got ${this.tokenNames[params.statementSign.type]}.`,\n\n    //################################\n    // Semantic errors\n    // Variables passed to some errors (fields of params):\n    //    name  name of a symbol (with keeping letters case and dialect)\n    //    id    id if a symbol\n    //    argumentCount              Required number of arguments for functions.\n    //    argumentCount.min, argumentCount.max  Required number of arguments  for functions with various number of arguments.\n    //    realArgumentCount            Number of arguments passed to a function.\n\n    ['e_sem_constant_forbidden_all'            ]: 'It is not allowed to use constants in this input field.',\n    ['e_sem_constant_forbidden_this'           ]: (params) => `It is not allowed to use constant __${params.name}__ in this input field.`,\n    ['e_sem_constant_as_function'              ]: (params) => `You are trying to use a constant __${params.name}__ as a function. Remove following brackets or add a mathematical operation after the constant.`,\n\n    ['e_sem_variable_forbidden_all'            ]: 'It is not allowed to use variables in this input field.',\n    ['e_sem_variable_forbidden_this'           ]: (params) => `It is not allowed to use variable __${params.name}__ in this input field.`,\n    ['e_sem_variable_as_function'              ]: (params) => `You are trying to use a variable __${params.name}__ as a function. Remove following brackets or add a mathematical operation after the variable.`,\n\n    ['e_sem_function_forbidden_all'            ]: 'It is not allowed to use functions in this input field.',\n    ['e_sem_function_forbidden_this'           ]: (params) => `It is not allowed to use function __${params.name}__ in this input field.`,\n    ['e_sem_function_as_symbol'                ]: (params) => `You are trying to use function __${params.name}__ without brackets. Put the brackets after a function name.`,\n\n    ['e_sem_function_arguments_few_exact'      ]: 'Function __${params.name}__ has too few arguments (${params.argumentCount} expected, but found ${params.realArgumentCount}).',\n    ['e_sem_function_arguments_extra_exact'    ]: (params) => `Function __${params.name}__ has too many arguments (${params.argumentCount} expected, but found ${params.realArgumentCount}).`,\n    ['e_sem_function_arguments_extra_0'        ]: (params) => `Function __${params.name}__ has does not need any arguments, remove them all.`,\n    ['e_sem_function_arguments_few_range_n_inf']: (params) => `Function __${params.name}__ has too few arguments (more than ${params.argumentCount.min} expected, but found ${params.realArgumentCount}).`,\n    ['e_sem_function_arguments_few_range_n_n'  ]: (params) => `Function __${params.name}__ has too few arguments (from ${params.argumentCount.min} to ${params.argumentCount.max} expected, but found ${params.realArgumentCount}).`,\n    ['e_sem_function_arguments_extra_range_n_n']: (params) => `Function __${params.name}__ has too many arguments (from ${params.argumentCount.min} to ${params.argumentCount.max} expected, but found ${params.realArgumentCount}).`,\n\n    ['e_sem_unknown_symbol'                    ]: (params) => `Constant or variable __${params.name}__ is unknown.`,\n    ['e_sem_unknown_function'                  ]: (params) => `Function with name __${params.name}__ is unknown.`,\n\n    ['e_sem_forbidden_equation'                ]: 'It is not allowed to use equations in this input field.',\n    ['e_sem_forbidden_inequality'              ]: 'It is not allowed to use inequalities in this input field.',\n    ['e_sem_forbidden_semicolon'               ]: 'It is not allowed to use a semicolon in this input field.',\n    ['e_sem_forbidden_sequence_of_statements'  ]: 'Semicolons can be used only to separate statements and it is not allowed to use more than one statement in this input field.',\n    ['e_sem_forbidden_empty'                   ]: 'The field must not be empty.',\n\n    ['e_sem_expected_finite'                   ]: 'The value of the field must be finite.', //, but is equal to ${params.value}.',\n    ['e_sem_expected_int'                      ]: (params) => `The value of the field must be integer, but is equal to ${params.value}.`,\n    ['e_sem_expected_range'                    ]: (params) => `The value of the field is supposed to be in the range between ${params.range.min} and ${params.range.max}, but is equal to ${params.value}.`,\n    ['e_sem_expected_gt'                       ]: (params) => `The value of the field is supposed to be greater than ${params.bound}, but is equal to ${params.value}.`,\n    ['e_sem_expected_lt'                       ]: (params) => `The value of the field is supposed to be less than ${params.bound}, but is equal to ${params.value}.`\n  }\n});\n\nHumaneMath.setLocale('en');\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/i18n/en.js\n **/"],"sourceRoot":""}